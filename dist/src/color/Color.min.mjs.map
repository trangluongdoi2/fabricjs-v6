{"version":3,"file":"Color.min.mjs","sources":["../../../src/color/Color.ts"],"sourcesContent":["import { ColorNameMap } from './color_map';\nimport { reHSLa, reHex, reRGBa } from './constants';\nimport type { TRGBAColorSource, TColorArg } from './typedefs';\nimport {\n  hue2rgb,\n  hexify,\n  rgb2Hsl,\n  fromAlphaToFloat,\n  greyAverage,\n} from './util';\n\n/**\n * @class Color common color operations\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors colors}\n */\nexport class Color {\n  private declare _source: TRGBAColorSource;\n\n  /**\n   *\n   * @param {string} [color] optional in hex or rgb(a) or hsl format or from known color list\n   */\n  constructor(color?: TColorArg) {\n    if (!color) {\n      // we default to black as canvas does\n      this.setSource([0, 0, 0, 1]);\n    } else if (color instanceof Color) {\n      this.setSource([...color._source]);\n    } else if (Array.isArray(color)) {\n      const [r, g, b, a = 1] = color;\n      this.setSource([r, g, b, a]);\n    } else {\n      this.setSource(this._tryParsingColor(color));\n    }\n  }\n\n  /**\n   * @private\n   * @param {string} [color] Color value to parse\n   * @returns {TRGBAColorSource}\n   */\n  protected _tryParsingColor(color: string) {\n    if (color in ColorNameMap) {\n      color = ColorNameMap[color as keyof typeof ColorNameMap];\n    }\n    return color === 'transparent'\n      ? ([255, 255, 255, 0] as TRGBAColorSource)\n      : Color.sourceFromHex(color) ||\n          Color.sourceFromRgb(color) ||\n          Color.sourceFromHsl(color) ||\n          // color is not recognized\n          // we default to black as canvas does\n          ([0, 0, 0, 1] as TRGBAColorSource);\n  }\n\n  /**\n   * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n   * @return {TRGBAColorSource}\n   */\n  getSource() {\n    return this._source;\n  }\n\n  /**\n   * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n   * @param {TRGBAColorSource} source\n   */\n  setSource(source: TRGBAColorSource) {\n    this._source = source;\n  }\n\n  /**\n   * Returns color representation in RGB format\n   * @return {String} ex: rgb(0-255,0-255,0-255)\n   */\n  toRgb() {\n    const [r, g, b] = this.getSource();\n    return `rgb(${r},${g},${b})`;\n  }\n\n  /**\n   * Returns color representation in RGBA format\n   * @return {String} ex: rgba(0-255,0-255,0-255,0-1)\n   */\n  toRgba() {\n    return `rgba(${this.getSource().join(',')})`;\n  }\n\n  /**\n   * Returns color representation in HSL format\n   * @return {String} ex: hsl(0-360,0%-100%,0%-100%)\n   */\n  toHsl() {\n    const [h, s, l] = rgb2Hsl(...this.getSource());\n    return `hsl(${h},${s}%,${l}%)`;\n  }\n\n  /**\n   * Returns color representation in HSLA format\n   * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)\n   */\n  toHsla() {\n    const [h, s, l, a] = rgb2Hsl(...this.getSource());\n    return `hsla(${h},${s}%,${l}%,${a})`;\n  }\n\n  /**\n   * Returns color representation in HEX format\n   * @return {String} ex: FF5555\n   */\n  toHex() {\n    const fullHex = this.toHexa();\n    return fullHex.slice(0, 6);\n  }\n\n  /**\n   * Returns color representation in HEXA format\n   * @return {String} ex: FF5555CC\n   */\n  toHexa() {\n    const [r, g, b, a] = this.getSource();\n    return `${hexify(r)}${hexify(g)}${hexify(b)}${hexify(Math.round(a * 255))}`;\n  }\n\n  /**\n   * Gets value of alpha channel for this color\n   * @return {Number} 0-1\n   */\n  getAlpha() {\n    return this.getSource()[3];\n  }\n\n  /**\n   * Sets value of alpha channel for this color\n   * @param {Number} alpha Alpha value 0-1\n   * @return {Color} thisArg\n   */\n  setAlpha(alpha: number) {\n    this._source[3] = alpha;\n    return this;\n  }\n\n  /**\n   * Transforms color to its grayscale representation\n   * @return {Color} thisArg\n   */\n  toGrayscale() {\n    this.setSource(greyAverage(this.getSource()));\n    return this;\n  }\n\n  /**\n   * Transforms color to its black and white representation\n   * @param {Number} threshold\n   * @return {Color} thisArg\n   */\n  toBlackWhite(threshold: number) {\n    const [average, , , a] = greyAverage(this.getSource()),\n      bOrW = average < (threshold || 127) ? 0 : 255;\n    this.setSource([bOrW, bOrW, bOrW, a]);\n    return this;\n  }\n\n  /**\n   * Overlays color with another color\n   * @param {String|Color} otherColor\n   * @return {Color} thisArg\n   */\n  overlayWith(otherColor: string | Color) {\n    if (!(otherColor instanceof Color)) {\n      otherColor = new Color(otherColor);\n    }\n\n    const source = this.getSource(),\n      otherAlpha = 0.5,\n      otherSource = otherColor.getSource(),\n      [R, G, B] = source.map((value, index) =>\n        Math.round(value * (1 - otherAlpha) + otherSource[index] * otherAlpha)\n      );\n\n    this.setSource([R, G, B, source[3]]);\n    return this;\n  }\n\n  /**\n   * Returns new color object, when given a color in RGB format\n   * @memberOf Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255)\n   * @return {Color}\n   */\n  static fromRgb(color: string): Color {\n    return Color.fromRgba(color);\n  }\n\n  /**\n   * Returns new color object, when given a color in RGBA format\n   * @static\n   * @function\n   * @memberOf Color\n   * @param {String} color\n   * @return {Color}\n   */\n  static fromRgba(color: string): Color {\n    return new Color(Color.sourceFromRgb(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format\n   * @memberOf Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)\n   * @return {TRGBAColorSource | undefined} source\n   */\n  static sourceFromRgb(color: string): TRGBAColorSource | undefined {\n    const match = color.match(reRGBa());\n    if (match) {\n      const [r, g, b] = match.slice(1, 4).map((value) => {\n        const parsedValue = parseFloat(value);\n        return value.endsWith('%')\n          ? Math.round(parsedValue * 2.55)\n          : parsedValue;\n      });\n      return [r, g, b, fromAlphaToFloat(match[4])];\n    }\n  }\n\n  /**\n   * Returns new color object, when given a color in HSL format\n   * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)\n   * @memberOf Color\n   * @return {Color}\n   */\n  static fromHsl(color: string): Color {\n    return Color.fromHsla(color);\n  }\n\n  /**\n   * Returns new color object, when given a color in HSLA format\n   * @static\n   * @function\n   * @memberOf Color\n   * @param {String} color\n   * @return {Color}\n   */\n  static fromHsla(color: string): Color {\n    return new Color(Color.sourceFromHsl(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.\n   * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n   * @memberOf Color\n   * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)\n   * @return {TRGBAColorSource | undefined} source\n   * @see http://http://www.w3.org/TR/css3-color/#hsl-color\n   */\n  static sourceFromHsl(color: string): TRGBAColorSource | undefined {\n    const match = color.match(reHSLa());\n    if (!match) {\n      return;\n    }\n\n    const h = (((parseFloat(match[1]) % 360) + 360) % 360) / 360,\n      s = parseFloat(match[2]) / 100,\n      l = parseFloat(match[3]) / 100;\n    let r: number, g: number, b: number;\n\n    if (s === 0) {\n      r = g = b = l;\n    } else {\n      const q = l <= 0.5 ? l * (s + 1) : l + s - l * s,\n        p = l * 2 - q;\n\n      r = hue2rgb(p, q, h + 1 / 3);\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - 1 / 3);\n    }\n\n    return [\n      Math.round(r * 255),\n      Math.round(g * 255),\n      Math.round(b * 255),\n      fromAlphaToFloat(match[4]),\n    ];\n  }\n\n  /**\n   * Returns new color object, when given a color in HEX format\n   * @static\n   * @memberOf Color\n   * @param {String} color Color value ex: FF5555\n   * @return {Color}\n   */\n  static fromHex(color: string): Color {\n    return new Color(Color.sourceFromHex(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HEX format\n   * @static\n   * @memberOf Color\n   * @param {String} color ex: FF5555 or FF5544CC (RGBa)\n   * @return {TRGBAColorSource | undefined} source\n   */\n  static sourceFromHex(color: string): TRGBAColorSource | undefined {\n    if (color.match(reHex())) {\n      const value = color.slice(color.indexOf('#') + 1),\n        isShortNotation = value.length <= 4;\n      let expandedValue: string[];\n      if (isShortNotation) {\n        expandedValue = value.split('').map((hex) => hex + hex);\n      } else {\n        expandedValue = value.match(/.{2}/g)!;\n      }\n      const [r, g, b, a = 255] = expandedValue.map((hexCouple) =>\n        parseInt(hexCouple, 16)\n      );\n      return [r, g, b, a / 255];\n    }\n  }\n}\n"],"names":["Color","constructor","color","this","setSource","_source","Array","isArray","r","g","b","a","_tryParsingColor","ColorNameMap","sourceFromHex","sourceFromRgb","sourceFromHsl","getSource","source","toRgb","concat","toRgba","join","toHsl","h","s","l","rgb2Hsl","toHsla","toHex","toHexa","slice","hexify","Math","round","getAlpha","setAlpha","alpha","toGrayscale","greyAverage","toBlackWhite","threshold","average","bOrW","overlayWith","otherColor","otherSource","R","G","B","map","value","index","fromRgb","fromRgba","match","reRGBa","parsedValue","parseFloat","endsWith","fromAlphaToFloat","fromHsl","fromHsla","reHSLa","q","p","hue2rgb","fromHex","reHex","indexOf","expandedValue","length","split","hex","hexCouple","parseInt"],"mappings":"gOAeO,MAAMA,EAOXC,WAAAA,CAAYC,GACV,GAAKA,EAGE,GAAIA,aAAiBF,EAC1BG,KAAKC,UAAU,IAAIF,EAAMG,eACpB,GAAIC,MAAMC,QAAQL,GAAQ,CAC/B,MAAOM,EAAGC,EAAGC,EAAGC,EAAI,GAAKT,EACzBC,KAAKC,UAAU,CAACI,EAAGC,EAAGC,EAAGC,GAC3B,MACER,KAAKC,UAAUD,KAAKS,iBAAiBV,SAPrCC,KAAKC,UAAU,CAAC,EAAG,EAAG,EAAG,GAS7B,CAOUQ,gBAAAA,CAAiBV,GAIzB,OAHIA,KAASW,IACXX,EAAQW,EAAaX,IAEN,gBAAVA,EACF,CAAC,IAAK,IAAK,IAAK,GACjBF,EAAMc,cAAcZ,IAClBF,EAAMe,cAAcb,IACpBF,EAAMgB,cAAcd,IAGnB,CAAC,EAAG,EAAG,EAAG,EACnB,CAMAe,SAAAA,GACE,OAAOd,KAAKE,OACd,CAMAD,SAAAA,CAAUc,GACRf,KAAKE,QAAUa,CACjB,CAMAC,KAAAA,GACE,MAAOX,EAAGC,EAAGC,GAAKP,KAAKc,YACvB,MAAAG,OAAAA,OAAcZ,EAACY,KAAAA,OAAIX,EAAC,KAAAW,OAAIV,EAAC,IAC3B,CAMAW,MAAAA,GACE,MAAAD,QAAAA,OAAejB,KAAKc,YAAYK,KAAK,KAAI,IAC3C,CAMAC,KAAAA,GACE,MAAOC,EAAGC,EAAGC,GAAKC,KAAWxB,KAAKc,aAClC,MAAAG,OAAAA,OAAcI,EAACJ,KAAAA,OAAIK,EAAC,MAAAL,OAAKM,EAAC,KAC5B,CAMAE,MAAAA,GACE,MAAOJ,EAAGC,EAAGC,EAAGf,GAAKgB,KAAWxB,KAAKc,aACrC,MAAA,QAAAG,OAAeI,EAAC,KAAAJ,OAAIK,EAACL,MAAAA,OAAKM,EAACN,MAAAA,OAAKT,EAAC,IACnC,CAMAkB,KAAAA,GAEE,OADgB1B,KAAK2B,SACNC,MAAM,EAAG,EAC1B,CAMAD,MAAAA,GACE,MAAOtB,EAAGC,EAAGC,EAAGC,GAAKR,KAAKc,YAC1B,MAAA,GAAAG,OAAUY,EAAOxB,IAAEY,OAAGY,EAAOvB,IAAEW,OAAGY,EAAOtB,IAAEU,OAAGY,EAAOC,KAAKC,MAAU,IAAJvB,IAClE,CAMAwB,QAAAA,GACE,OAAOhC,KAAKc,YAAY,EAC1B,CAOAmB,QAAAA,CAASC,GAEP,OADAlC,KAAKE,QAAQ,GAAKgC,EACXlC,IACT,CAMAmC,WAAAA,GAEE,OADAnC,KAAKC,UAAUmC,EAAYpC,KAAKc,cACzBd,IACT,CAOAqC,YAAAA,CAAaC,GACX,MAAOC,EAAO,CAAA,CAAM/B,GAAK4B,EAAYpC,KAAKc,aACxC0B,EAAOD,GAAWD,GAAa,KAAO,EAAI,IAE5C,OADAtC,KAAKC,UAAU,CAACuC,EAAMA,EAAMA,EAAMhC,IAC3BR,IACT,CAOAyC,WAAAA,CAAYC,GACJA,aAAsB7C,IAC1B6C,EAAa,IAAI7C,EAAM6C,IAGzB,MAAM3B,EAASf,KAAKc,YAElB6B,EAAcD,EAAW5B,aACxB8B,EAAGC,EAAGC,GAAK/B,EAAOgC,KAAI,CAACC,EAAOC,IAC7BnB,KAAKC,MAAW,GAALiB,EAHA,GAG2BL,EAAYM,MAItD,OADAjD,KAAKC,UAAU,CAAC2C,EAAGC,EAAGC,EAAG/B,EAAO,KACzBf,IACT,CAQA,cAAOkD,CAAQnD,GACb,OAAOF,EAAMsD,SAASpD,EACxB,CAUA,eAAOoD,CAASpD,GACd,OAAO,IAAIF,EAAMA,EAAMe,cAAcb,GACvC,CAQA,oBAAOa,CAAcb,GACnB,MAAMqD,EAAQrD,EAAMqD,MAAMC,KAC1B,GAAID,EAAO,CACT,MAAO/C,EAAGC,EAAGC,GAAK6C,EAAMxB,MAAM,EAAG,GAAGmB,KAAKC,IACvC,MAAMM,EAAcC,WAAWP,GAC/B,OAAOA,EAAMQ,SAAS,KAClB1B,KAAKC,MAAoB,KAAduB,GACXA,CAAW,IAEjB,MAAO,CAACjD,EAAGC,EAAGC,EAAGkD,EAAiBL,EAAM,IAC1C,CACF,CAQA,cAAOM,CAAQ3D,GACb,OAAOF,EAAM8D,SAAS5D,EACxB,CAUA,eAAO4D,CAAS5D,GACd,OAAO,IAAIF,EAAMA,EAAMgB,cAAcd,GACvC,CAUA,oBAAOc,CAAcd,GACnB,MAAMqD,EAAQrD,EAAMqD,MAAMQ,KAC1B,IAAKR,EACH,OAGF,MAAM/B,GAAOkC,WAAWH,EAAM,IAAM,IAAO,KAAO,IAAO,IACvD9B,EAAIiC,WAAWH,EAAM,IAAM,IAC3B7B,EAAIgC,WAAWH,EAAM,IAAM,IAC7B,IAAI/C,EAAWC,EAAWC,EAE1B,GAAU,IAANe,EACFjB,EAAIC,EAAIC,EAAIgB,MACP,CACL,MAAMsC,EAAItC,GAAK,GAAMA,GAAKD,EAAI,GAAKC,EAAID,EAAIC,EAAID,EAC7CwC,EAAQ,EAAJvC,EAAQsC,EAEdxD,EAAI0D,EAAQD,EAAGD,EAAGxC,EAAI,EAAI,GAC1Bf,EAAIyD,EAAQD,EAAGD,EAAGxC,GAClBd,EAAIwD,EAAQD,EAAGD,EAAGxC,EAAI,EAAI,EAC5B,CAEA,MAAO,CACLS,KAAKC,MAAU,IAAJ1B,GACXyB,KAAKC,MAAU,IAAJzB,GACXwB,KAAKC,MAAU,IAAJxB,GACXkD,EAAiBL,EAAM,IAE3B,CASA,cAAOY,CAAQjE,GACb,OAAO,IAAIF,EAAMA,EAAMc,cAAcZ,GACvC,CASA,oBAAOY,CAAcZ,GACnB,GAAIA,EAAMqD,MAAMa,KAAU,CACxB,MAAMjB,EAAQjD,EAAM6B,MAAM7B,EAAMmE,QAAQ,KAAO,GAE/C,IAAIC,EAEFA,EAHkBnB,EAAMoB,QAAU,EAGlBpB,EAAMqB,MAAM,IAAItB,KAAKuB,GAAQA,EAAMA,IAEnCtB,EAAMI,MAAM,SAE9B,MAAO/C,EAAGC,EAAGC,EAAGC,EAAI,KAAO2D,EAAcpB,KAAKwB,GAC5CC,SAASD,EAAW,MAEtB,MAAO,CAAClE,EAAGC,EAAGC,EAAGC,EAAI,IACvB,CACF"}