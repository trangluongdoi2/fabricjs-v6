import{defineProperty as a,objectWithoutProperties as t}from"../../_virtual/_rollupPluginBabelHelpers.min.mjs";import{BaseFilter as m}from"./BaseFilter.min.mjs";import{classRegistry as r}from"../ClassRegistry.min.mjs";import{fragmentSource as e}from"./shaders/gamma.min.mjs";const s=["gamma"],o={mainParameter:"gamma",gamma:[1,1,1]};class i extends m{getFragmentSource(){return e}constructor(){let a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{gamma:m=[1,1,1]}=a;super(t(a,s)),this.gamma=m}applyTo2d(a){let{imageData:{data:t}}=a;const m=this.gamma,r=1/m[0],e=1/m[1],s=1/m[2];this.rgbValues||(this.rgbValues={r:new Uint8Array(256),g:new Uint8Array(256),b:new Uint8Array(256)});const o=this.rgbValues;for(let a=0;a<256;a++)o.r[a]=255*Math.pow(a/255,r),o.g[a]=255*Math.pow(a/255,e),o.b[a]=255*Math.pow(a/255,s);for(let a=0;a<t.length;a+=4)t[a]=o.r[t[a]],t[a+1]=o.g[t[a+1]],t[a+2]=o.b[t[a+2]]}getUniformLocations(a,t){return{uGamma:a.getUniformLocation(t,"uGamma")}}sendUniformData(a,t){a.uniform3fv(t.uGamma,this.gamma)}}a(i,"type","Gamma"),a(i,"defaults",o),r.setClass(i);export{i as Gamma,o as gammaDefaultValues};
//# sourceMappingURL=Gamma.min.mjs.map
