{"version":3,"file":"Invert.min.mjs","sources":["../../../src/filters/Invert.ts"],"sourcesContent":["import type { TClassProperties } from '../typedefs';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/invert';\n\nexport const invertDefaultValues: Partial<TClassProperties<Invert>> = {\n  alpha: false,\n  invert: true,\n  mainParameter: 'invert',\n};\n\n/**\n * @example\n * const filter = new Invert();\n * object.filters.push(filter);\n * object.applyFilters(canvas.renderAll.bind(canvas));\n */\nexport class Invert extends BaseFilter {\n  /**\n   * Invert also alpha.\n   * @param {Boolean} alpha\n   * @default\n   **/\n  declare alpha: boolean;\n\n  /**\n   * Filter invert. if false, does nothing\n   * @param {Boolean} invert\n   * @default\n   */\n  declare invert: boolean;\n\n  static type = 'Invert';\n\n  static defaults = invertDefaultValues;\n\n  /**\n   * Apply the Invert operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = 255 - data[i];\n      data[i + 1] = 255 - data[i + 1];\n      data[i + 2] = 255 - data[i + 2];\n\n      if (this.alpha) {\n        data[i + 3] = 255 - data[i + 3];\n      }\n    }\n  }\n\n  protected getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  /**\n   * Invert filter isNeutralState implementation\n   * Used only in image applyFilters to discard filters that will not have an effect\n   * on the image\n   * @param {Object} options\n   **/\n  isNeutralState() {\n    return !this.invert;\n  }\n\n  /**\n   * Return WebGL uniform locations for this filter's shader.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {WebGLShaderProgram} program This filter's compiled shader program.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram\n  ): TWebGLUniformLocationMap {\n    return {\n      uInvert: gl.getUniformLocation(program, 'uInvert'),\n      uAlpha: gl.getUniformLocation(program, 'uAlpha'),\n    };\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap\n  ) {\n    gl.uniform1i(uniformLocations.uInvert, Number(this.invert));\n    gl.uniform1i(uniformLocations.uAlpha, Number(this.alpha));\n  }\n}\n\nclassRegistry.setClass(Invert);\n"],"names":["invertDefaultValues","alpha","invert","mainParameter","Invert","BaseFilter","applyTo2d","_ref","imageData","data","i","length","this","getFragmentSource","fragmentSource","isNeutralState","getUniformLocations","gl","program","uInvert","getUniformLocation","uAlpha","sendUniformData","uniformLocations","uniform1i","Number","_defineProperty","classRegistry","setClass"],"mappings":"uPAMO,MAAMA,EAAyD,CACpEC,OAAO,EACPC,QAAQ,EACRC,cAAe,UASV,MAAMC,UAAeC,EAyB1BC,SAAAA,CAASC,GAA4C,IAAzCC,WAAWC,KAAEA,IAA0BF,EACjD,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAKE,OAAQD,GAAK,EACpCD,EAAKC,GAAK,IAAMD,EAAKC,GACrBD,EAAKC,EAAI,GAAK,IAAMD,EAAKC,EAAI,GAC7BD,EAAKC,EAAI,GAAK,IAAMD,EAAKC,EAAI,GAEzBE,KAAKX,QACPQ,EAAKC,EAAI,GAAK,IAAMD,EAAKC,EAAI,GAGnC,CAEUG,iBAAAA,GACR,OAAOC,CACT,CAQAC,cAAAA,GACE,OAAQH,KAAKV,MACf,CAQAc,mBAAAA,CACEC,EACAC,GAEA,MAAO,CACLC,QAASF,EAAGG,mBAAmBF,EAAS,WACxCG,OAAQJ,EAAGG,mBAAmBF,EAAS,UAE3C,CAQAI,eAAAA,CACEL,EACAM,GAEAN,EAAGO,UAAUD,EAAiBJ,QAASM,OAAOb,KAAKV,SACnDe,EAAGO,UAAUD,EAAiBF,OAAQI,OAAOb,KAAKX,OACpD,EAvEAyB,EARWtB,EAAM,OAeH,UAAQsB,EAfXtB,EAAM,WAiBCJ,GAiEpB2B,EAAcC,SAASxB"}