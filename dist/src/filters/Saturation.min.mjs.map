{"version":3,"file":"Saturation.min.mjs","sources":["../../../src/filters/Saturation.ts"],"sourcesContent":["import type { TClassProperties } from '../typedefs';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/saturation';\n\n/**\n * Saturate filter class\n * @example\n * const filter = new Saturation({\n *   saturation: 1\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\n\nexport const saturationDefaultValues: Partial<TClassProperties<Saturation>> = {\n  saturation: 0,\n  mainParameter: 'saturation',\n};\n\nexport class Saturation extends BaseFilter {\n  /**\n   * Saturation value, from -1 to 1.\n   * Increases/decreases the color saturation.\n   * A value of 0 has no effect.\n   *\n   * @param {Number} saturation\n   * @default\n   */\n  declare saturation: number;\n\n  static type = 'Saturation';\n\n  static defaults = saturationDefaultValues;\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Saturation operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    if (this.saturation === 0) {\n      return;\n    }\n    const adjust = -this.saturation;\n    for (let i = 0; i < data.length; i += 4) {\n      const max = Math.max(data[i], data[i + 1], data[i + 2]);\n      data[i] += max !== data[i] ? (max - data[i]) * adjust : 0;\n      data[i + 1] += max !== data[i + 1] ? (max - data[i + 1]) * adjust : 0;\n      data[i + 2] += max !== data[i + 2] ? (max - data[i + 2]) * adjust : 0;\n    }\n  }\n\n  /**\n   * Return WebGL uniform locations for this filter's shader.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {WebGLShaderProgram} program This filter's compiled shader program.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram\n  ): TWebGLUniformLocationMap {\n    return {\n      uSaturation: gl.getUniformLocation(program, 'uSaturation'),\n    };\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap\n  ) {\n    gl.uniform1f(uniformLocations.uSaturation, -this.saturation);\n  }\n}\n\nclassRegistry.setClass(Saturation);\n"],"names":["saturationDefaultValues","saturation","mainParameter","Saturation","BaseFilter","getFragmentSource","fragmentSource","applyTo2d","_ref","imageData","data","this","adjust","i","length","max","Math","getUniformLocations","gl","program","uSaturation","getUniformLocation","sendUniformData","uniformLocations","uniform1f","_defineProperty","classRegistry","setClass"],"mappings":"2PAgBO,MAAMA,EAAiE,CAC5EC,WAAY,EACZC,cAAe,cAGV,MAAMC,UAAmBC,EAe9BC,iBAAAA,GACE,OAAOC,CACT,CAQAC,SAAAA,CAASC,GAA4C,IAAzCC,WAAWC,KAAEA,IAA0BF,EACjD,GAAwB,IAApBG,KAAKV,WACP,OAEF,MAAMW,GAAUD,KAAKV,WACrB,IAAK,IAAIY,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,GAAK,EAAG,CACvC,MAAME,EAAMC,KAAKD,IAAIL,EAAKG,GAAIH,EAAKG,EAAI,GAAIH,EAAKG,EAAI,IACpDH,EAAKG,IAAME,IAAQL,EAAKG,IAAME,EAAML,EAAKG,IAAMD,EAAS,EACxDF,EAAKG,EAAI,IAAME,IAAQL,EAAKG,EAAI,IAAME,EAAML,EAAKG,EAAI,IAAMD,EAAS,EACpEF,EAAKG,EAAI,IAAME,IAAQL,EAAKG,EAAI,IAAME,EAAML,EAAKG,EAAI,IAAMD,EAAS,CACtE,CACF,CAQAK,mBAAAA,CACEC,EACAC,GAEA,MAAO,CACLC,YAAaF,EAAGG,mBAAmBF,EAAS,eAEhD,CAQAG,eAAAA,CACEJ,EACAK,GAEAL,EAAGM,UAAUD,EAAiBH,aAAcT,KAAKV,WACnD,EA/DAwB,EADWtB,EAAU,OAWP,cAAYsB,EAXftB,EAAU,WAaHH,GAsDpB0B,EAAcC,SAASxB"}