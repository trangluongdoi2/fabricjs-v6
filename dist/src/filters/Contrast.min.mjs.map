{"version":3,"file":"Contrast.min.mjs","sources":["../../../src/filters/Contrast.ts"],"sourcesContent":["import type { TClassProperties } from '../typedefs';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/constrast';\nexport const contrastDefaultValues: Partial<TClassProperties<Contrast>> = {\n  contrast: 0,\n  mainParameter: 'contrast',\n};\n\n/**\n * Contrast filter class\n * @example\n * const filter = new Contrast({\n *   contrast: 0.25\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Contrast extends BaseFilter {\n  /**\n   * contrast value, range from -1 to 1.\n   * @param {Number} contrast\n   * @default 0\n   */\n  declare contrast: number;\n\n  static type = 'Contrast';\n\n  static defaults = contrastDefaultValues;\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n  /**\n   * Apply the Contrast operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    if (this.contrast === 0) {\n      return;\n    }\n    const contrast = Math.floor(this.contrast * 255),\n      contrastF = (259 * (contrast + 255)) / (255 * (259 - contrast));\n\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = contrastF * (data[i] - 128) + 128;\n      data[i + 1] = contrastF * (data[i + 1] - 128) + 128;\n      data[i + 2] = contrastF * (data[i + 2] - 128) + 128;\n    }\n  }\n\n  /**\n   * Return WebGL uniform locations for this filter's shader.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {WebGLShaderProgram} program This filter's compiled shader program.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram\n  ): TWebGLUniformLocationMap {\n    return {\n      uContrast: gl.getUniformLocation(program, 'uContrast'),\n    };\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap\n  ) {\n    gl.uniform1f(uniformLocations.uContrast, this.contrast);\n  }\n}\n\nclassRegistry.setClass(Contrast);\n"],"names":["contrastDefaultValues","contrast","mainParameter","Contrast","BaseFilter","getFragmentSource","fragmentSource","applyTo2d","_ref","imageData","data","this","Math","floor","contrastF","i","length","getUniformLocations","gl","program","uContrast","getUniformLocation","sendUniformData","uniformLocations","uniform1f","_defineProperty","classRegistry","setClass"],"mappings":"0PAKO,MAAMA,EAA6D,CACxEC,SAAU,EACVC,cAAe,YAYV,MAAMC,UAAiBC,EAY5BC,iBAAAA,GACE,OAAOC,CACT,CAOAC,SAAAA,CAASC,GAA4C,IAAzCC,WAAWC,KAAEA,IAA0BF,EACjD,GAAsB,IAAlBG,KAAKV,SACP,OAEF,MAAMA,EAAWW,KAAKC,MAAsB,IAAhBF,KAAKV,UAC/Ba,EAAa,KAAOb,EAAW,MAAS,KAAO,IAAMA,IAEvD,IAAK,IAAIc,EAAI,EAAGA,EAAIL,EAAKM,OAAQD,GAAK,EACpCL,EAAKK,GAAKD,GAAaJ,EAAKK,GAAK,KAAO,IACxCL,EAAKK,EAAI,GAAKD,GAAaJ,EAAKK,EAAI,GAAK,KAAO,IAChDL,EAAKK,EAAI,GAAKD,GAAaJ,EAAKK,EAAI,GAAK,KAAO,GAEpD,CAQAE,mBAAAA,CACEC,EACAC,GAEA,MAAO,CACLC,UAAWF,EAAGG,mBAAmBF,EAAS,aAE9C,CAQAG,eAAAA,CACEJ,EACAK,GAEAL,EAAGM,UAAUD,EAAiBH,UAAWT,KAAKV,SAChD,EA5DAwB,EADWtB,EAAQ,OAQL,YAAUsB,EARbtB,EAAQ,WAUDH,GAsDpB0B,EAAcC,SAASxB"}