import{defineProperty as e}from"../../_virtual/_rollupPluginBabelHelpers.min.mjs";import{Color as a}from"../color/Color.min.mjs";import{BaseFilter as o}from"./BaseFilter.min.mjs";import{classRegistry as t}from"../ClassRegistry.min.mjs";import{blendColorFragmentSource as r}from"./shaders/blendColor.min.mjs";const s={color:"#F95C63",mode:"multiply",alpha:1};class i extends o{getCacheKey(){return"".concat(this.type,"_").concat(this.mode)}getFragmentSource(){return"\n      precision highp float;\n      uniform sampler2D uTexture;\n      uniform vec4 uColor;\n      varying vec2 vTexCoord;\n      void main() {\n        vec4 color = texture2D(uTexture, vTexCoord);\n        gl_FragColor = color;\n        if (color.a > 0.0) {\n          ".concat(r[this.mode],"\n        }\n      }\n      ")}applyTo2d(e){let{imageData:{data:o}}=e;const t=new a(this.color).getSource(),r=t[0]*this.alpha,s=t[1]*this.alpha,i=t[2]*this.alpha,n=1-this.alpha;for(let e=0;e<o.length;e+=4){const a=o[e],t=o[e+1],l=o[e+2];switch(this.mode){case"multiply":o[e]=a*r/255,o[e+1]=t*s/255,o[e+2]=l*i/255;break;case"screen":o[e]=255-(255-a)*(255-r)/255,o[e+1]=255-(255-t)*(255-s)/255,o[e+2]=255-(255-l)*(255-i)/255;break;case"add":o[e]=a+r,o[e+1]=t+s,o[e+2]=l+i;break;case"difference":o[e]=Math.abs(a-r),o[e+1]=Math.abs(t-s),o[e+2]=Math.abs(l-i);break;case"subtract":o[e]=a-r,o[e+1]=t-s,o[e+2]=l-i;break;case"darken":o[e]=Math.min(a,r),o[e+1]=Math.min(t,s),o[e+2]=Math.min(l,i);break;case"lighten":o[e]=Math.max(a,r),o[e+1]=Math.max(t,s),o[e+2]=Math.max(l,i);break;case"overlay":o[e]=r<128?2*a*r/255:255-2*(255-a)*(255-r)/255,o[e+1]=s<128?2*t*s/255:255-2*(255-t)*(255-s)/255,o[e+2]=i<128?2*l*i/255:255-2*(255-l)*(255-i)/255;break;case"exclusion":o[e]=r+a-2*r*a/255,o[e+1]=s+t-2*s*t/255,o[e+2]=i+l-2*i*l/255;break;case"tint":o[e]=r+a*n,o[e+1]=s+t*n,o[e+2]=i+l*n}}}getUniformLocations(e,a){return{uColor:e.getUniformLocation(a,"uColor")}}sendUniformData(e,o){const t=new a(this.color).getSource();t[0]=this.alpha*t[0]/255,t[1]=this.alpha*t[1]/255,t[2]=this.alpha*t[2]/255,t[3]=this.alpha,e.uniform4fv(o.uColor,t)}toObject(){return{type:this.type,color:this.color,mode:this.mode,alpha:this.alpha}}}e(i,"defaults",s),e(i,"type","BlendColor"),t.setClass(i);export{i as BlendColor,s as blendColorDefaultValues};
//# sourceMappingURL=BlendColor.min.mjs.map
