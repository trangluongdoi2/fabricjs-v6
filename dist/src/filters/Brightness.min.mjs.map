{"version":3,"file":"Brightness.min.mjs","sources":["../../../src/filters/Brightness.ts"],"sourcesContent":["import type { TClassProperties } from '../typedefs';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/brightness';\nexport const brightnessDefaultValues: Partial<TClassProperties<Brightness>> = {\n  brightness: 0,\n  mainParameter: 'brightness',\n};\n\n/**\n * Brightness filter class\n * @example\n * const filter = new Brightness({\n *   brightness: 0.05\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Brightness extends BaseFilter {\n  /**\n   * Brightness value, from -1 to 1.\n   * translated to -255 to 255 for 2d\n   * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n   * @param {Number} brightness\n   * @default\n   */\n  declare brightness: number;\n\n  static type = 'Brightness';\n\n  static defaults = brightnessDefaultValues;\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    if (this.brightness === 0) {\n      return;\n    }\n    const brightness = Math.round(this.brightness * 255);\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = data[i] + brightness;\n      data[i + 1] = data[i + 1] + brightness;\n      data[i + 2] = data[i + 2] + brightness;\n    }\n  }\n\n  /**\n   * Return WebGL uniform locations for this filter's shader.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {WebGLShaderProgram} program This filter's compiled shader program.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram\n  ): TWebGLUniformLocationMap {\n    return {\n      uBrightness: gl.getUniformLocation(program, 'uBrightness'),\n    };\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap\n  ) {\n    gl.uniform1f(uniformLocations.uBrightness, this.brightness);\n  }\n}\n\nclassRegistry.setClass(Brightness);\n"],"names":["brightnessDefaultValues","brightness","mainParameter","Brightness","BaseFilter","getFragmentSource","fragmentSource","applyTo2d","_ref","imageData","data","this","Math","round","i","length","getUniformLocations","gl","program","uBrightness","getUniformLocation","sendUniformData","uniformLocations","uniform1f","_defineProperty","classRegistry","setClass"],"mappings":"2PAKO,MAAMA,EAAiE,CAC5EC,WAAY,EACZC,cAAe,cAYV,MAAMC,UAAmBC,EAc9BC,iBAAAA,GACE,OAAOC,CACT,CAQAC,SAAAA,CAASC,GAA4C,IAAzCC,WAAWC,KAAEA,IAA0BF,EACjD,GAAwB,IAApBG,KAAKV,WACP,OAEF,MAAMA,EAAaW,KAAKC,MAAwB,IAAlBF,KAAKV,YACnC,IAAK,IAAIa,EAAI,EAAGA,EAAIJ,EAAKK,OAAQD,GAAK,EACpCJ,EAAKI,GAAKJ,EAAKI,GAAKb,EACpBS,EAAKI,EAAI,GAAKJ,EAAKI,EAAI,GAAKb,EAC5BS,EAAKI,EAAI,GAAKJ,EAAKI,EAAI,GAAKb,CAEhC,CAQAe,mBAAAA,CACEC,EACAC,GAEA,MAAO,CACLC,YAAaF,EAAGG,mBAAmBF,EAAS,eAEhD,CAQAG,eAAAA,CACEJ,EACAK,GAEAL,EAAGM,UAAUD,EAAiBH,YAAaR,KAAKV,WAClD,EA7DAuB,EADWrB,EAAU,OAUP,cAAYqB,EAVfrB,EAAU,WAYHH,GAqDpByB,EAAcC,SAASvB"}