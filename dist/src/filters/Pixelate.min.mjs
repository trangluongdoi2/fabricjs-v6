import{defineProperty as e}from"../../_virtual/_rollupPluginBabelHelpers.min.mjs";import{BaseFilter as t}from"./BaseFilter.min.mjs";import{classRegistry as i}from"../ClassRegistry.min.mjs";import{fragmentSource as o}from"./shaders/pixelate.min.mjs";const s={blocksize:4,mainParameter:"blocksize"};class r extends t{applyTo2d(e){let{imageData:{data:t,width:i,height:o}}=e;for(let e=0;e<o;e+=this.blocksize)for(let s=0;s<i;s+=this.blocksize){const r=4*e*i+4*s,a=t[r],l=t[r+1],m=t[r+2],n=t[r+3];for(let r=e;r<Math.min(e+this.blocksize,o);r++)for(let e=s;e<Math.min(s+this.blocksize,i);e++){const o=4*r*i+4*e;t[o]=a,t[o+1]=l,t[o+2]=m,t[o+3]=n}}}isNeutralState(){return 1===this.blocksize}getFragmentSource(){return o}getUniformLocations(e,t){return{uBlocksize:e.getUniformLocation(t,"uBlocksize"),uStepW:e.getUniformLocation(t,"uStepW"),uStepH:e.getUniformLocation(t,"uStepH")}}sendUniformData(e,t){e.uniform1f(t.uBlocksize,this.blocksize)}}e(r,"type","Pixelate"),e(r,"defaults",s),i.setClass(r);export{r as Pixelate,s as pixelateDefaultValues};
//# sourceMappingURL=Pixelate.min.mjs.map
