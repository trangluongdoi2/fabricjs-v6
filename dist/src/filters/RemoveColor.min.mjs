import{defineProperty as o,objectSpread2 as t}from"../../_virtual/_rollupPluginBabelHelpers.min.mjs";import{Color as e}from"../color/Color.min.mjs";import{BaseFilter as r}from"./BaseFilter.min.mjs";import{classRegistry as s}from"../ClassRegistry.min.mjs";import{fragmentShader as i}from"./shaders/removeColor.min.mjs";const n={color:"#FFFFFF",distance:.02,useAlpha:!1};class a extends r{getFragmentShader(){return i}applyTo2d(o){let{imageData:{data:t}}=o;const r=255*this.distance,s=new e(this.color).getSource(),i=[s[0]-r,s[1]-r,s[2]-r],n=[s[0]+r,s[1]+r,s[2]+r];for(let o=0;o<t.length;o+=4){const e=t[o],r=t[o+1],s=t[o+2];e>i[0]&&r>i[1]&&s>i[2]&&e<n[0]&&r<n[1]&&s<n[2]&&(t[o+3]=0)}}getUniformLocations(o,t){return{uLow:o.getUniformLocation(t,"uLow"),uHigh:o.getUniformLocation(t,"uHigh")}}sendUniformData(o,t){const r=new e(this.color).getSource(),s=this.distance,i=[0+r[0]/255-s,0+r[1]/255-s,0+r[2]/255-s,1],n=[r[0]/255+s,r[1]/255+s,r[2]/255+s,1];o.uniform4fv(t.uLow,i),o.uniform4fv(t.uHigh,n)}toObject(){return t(t({},super.toObject()),{},{color:this.color,distance:this.distance})}}o(a,"type","RemoveColor"),o(a,"defaults",n),s.setClass(a);export{a as RemoveColor,n as removeColorDefaultValues};
//# sourceMappingURL=RemoveColor.min.mjs.map
