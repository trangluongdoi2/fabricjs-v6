{"version":3,"file":"InteractiveObject.mjs","sources":["../../../../src/shapes/Object/InteractiveObject.ts"],"sourcesContent":["import { Point, ZERO } from '../../Point';\nimport type { TCornerPoint, TDegree } from '../../typedefs';\nimport { FabricObject } from './Object';\nimport { degreesToRadians } from '../../util/misc/radiansDegreesConversion';\nimport type { TQrDecomposeOut } from '../../util/misc/matrix';\nimport {\n  calcDimensionsMatrix,\n  createRotateMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from '../../util/misc/matrix';\nimport type { Control } from '../../controls/Control';\nimport { sizeAfterTransform } from '../../util/misc/objectTransforms';\nimport type { ObjectEvents, TPointerEvent } from '../../EventTypeDefs';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { ControlRenderingStyleOverride } from '../../controls/controlRendering';\nimport type { FabricObjectProps } from './types/FabricObjectProps';\nimport type { TFabricObjectProps, SerializedObjectProps } from './types';\nimport { createObjectDefaultControls } from '../../controls/commonControls';\nimport { interactiveObjectDefaultValues } from './defaultValues';\n\nexport type TOCoord = Point & {\n  corner: TCornerPoint;\n  touchCorner: TCornerPoint;\n};\n\nexport type TControlSet = Record<string, Control>;\n\nexport type TBorderRenderingStyleOverride = Partial<\n  Pick<InteractiveFabricObject, 'borderColor' | 'borderDashArray'>\n>;\n\nexport type TStyleOverride = ControlRenderingStyleOverride &\n  TBorderRenderingStyleOverride &\n  Partial<\n    Pick<InteractiveFabricObject, 'hasBorders' | 'hasControls'> & {\n      forActiveSelection: boolean;\n    }\n  >;\n\nexport class InteractiveFabricObject<\n    Props extends TFabricObjectProps = Partial<FabricObjectProps>,\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements FabricObjectProps\n{\n  declare noScaleCache: boolean;\n\n  declare snapAngle?: TDegree;\n  declare snapThreshold?: TDegree;\n\n  declare lockMovementX: boolean;\n  declare lockMovementY: boolean;\n  declare lockRotation: boolean;\n  declare lockScalingX: boolean;\n  declare lockScalingY: boolean;\n  declare lockSkewingX: boolean;\n  declare lockSkewingY: boolean;\n  declare lockScalingFlip: boolean;\n\n  declare cornerSize: number;\n  declare touchCornerSize: number;\n  declare transparentCorners: boolean;\n  declare cornerColor: string;\n  declare cornerStrokeColor: string;\n  declare cornerStyle: 'rect' | 'circle';\n  declare cornerDashArray: number[] | null;\n  declare hasControls: boolean;\n\n  declare borderColor: string;\n  declare borderDashArray: number[] | null;\n  declare borderOpacityWhenMoving: number;\n  declare borderScaleFactor: number;\n  declare hasBorders: boolean;\n  declare selectionBackgroundColor: string;\n\n  declare selectable: boolean;\n  declare evented: boolean;\n  declare perPixelTargetFind: boolean;\n  declare activeOn: 'down' | 'up';\n\n  declare hoverCursor: CSSStyleDeclaration['cursor'] | null;\n  declare moveCursor: CSSStyleDeclaration['cursor'] | null;\n\n  /**\n   * The object's controls' position in viewport coordinates\n   * Calculated by {@link Control#positionHandler} and {@link Control#calcCornerCoords}, depending on {@link padding}.\n   * `corner/touchCorner` describe the 4 points forming the interactive area of the corner.\n   * Used to draw and locate controls.\n   */\n  declare oCoords: Record<string, TOCoord>;\n\n  /**\n   * keeps the value of the last hovered corner during mouse move.\n   * 0 is no corner, or 'mt', 'ml', 'mtr' etc..\n   * It should be private, but there is no harm in using it as\n   * a read-only property.\n   * this isn't cleaned automatically. Non selected objects may have wrong values\n   * @type [string]\n   */\n  declare __corner?: string;\n\n  /**\n   * a map of control visibility for this object.\n   * this was left when controls were introduced to not break the api too much\n   * this takes priority over the generic control visibility\n   */\n  declare _controlsVisibility: Record<string, boolean>;\n\n  /**\n   * holds the controls for the object.\n   * controls are added by default_controls.js\n   */\n  declare controls: TControlSet;\n\n  /**\n   * internal boolean to signal the code that the object is\n   * part of the move action.\n   */\n  declare isMoving?: boolean;\n\n  /**\n   * A boolean used from the gesture module to keep tracking of a scaling\n   * action when there is no scaling transform in place.\n   * This is an edge case and is used twice in all codebase.\n   * Probably added to keep track of some performance issues\n   * @TODO use git blame to investigate why it was added\n   * DON'T USE IT. WE WILL TRY TO REMOVE IT\n   */\n  declare _scaling?: boolean;\n\n  declare canvas?: Canvas;\n\n  static ownDefaults = interactiveObjectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      controls: createObjectDefaultControls(),\n      ...InteractiveFabricObject.ownDefaults,\n    };\n  }\n\n  /**\n   * Update width and height of the canvas for cache\n   * returns true or false if canvas needed resize.\n   * @private\n   * @return {Boolean} true if the canvas has been resized\n   */\n  _updateCacheCanvas() {\n    const targetCanvas = this.canvas;\n    if (this.noScaleCache && targetCanvas && targetCanvas._currentTransform) {\n      const transform = targetCanvas._currentTransform,\n        target = transform.target,\n        action = transform.action;\n      if (\n        this === (target as unknown as this) &&\n        action &&\n        action.startsWith('scale')\n      ) {\n        return false;\n      }\n    }\n    return super._updateCacheCanvas();\n  }\n\n  getActiveControl() {\n    const key = this.__corner;\n    return key\n      ? {\n          key,\n          control: this.controls[key],\n          coord: this.oCoords[key],\n        }\n      : undefined;\n  }\n\n  /**\n   * Determines which corner is under the mouse cursor, represented by `pointer`.\n   * This function is return a corner only if the object is the active one.\n   * This is done to avoid selecting corner of non active object and activating transformations\n   * rather than drag action. The default behavior of fabricJS is that if you want to transform\n   * an object, first you select it to show the control set\n   * @private\n   * @param {Object} pointer The pointer indicating the mouse position\n   * @param {boolean} forTouch indicates if we are looking for interaction area with a touch action\n   * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or 0 if nothing is found.\n   */\n  _findTargetCorner(pointer: Point, forTouch = false): string {\n    if (!this.hasControls || !this.canvas) {\n      return '';\n    }\n\n    this.__corner = undefined;\n    const cornerEntries = Object.entries(this.oCoords);\n    for (let i = cornerEntries.length - 1; i >= 0; i--) {\n      const [key, corner] = cornerEntries[i];\n      if (\n        this.controls[key].shouldActivate(\n          key,\n          this,\n          pointer,\n          forTouch ? corner.touchCorner : corner.corner\n        )\n      ) {\n        // this.canvas.contextTop.fillRect(pointer.x - 1, pointer.y - 1, 2, 2);\n        return (this.__corner = key);\n      }\n    }\n\n    return '';\n  }\n\n  /**\n   * Calculates the coordinates of the center of each control plus the corners of the control itself\n   * This basically just delegates to each control positionHandler\n   * WARNING: changing what is passed to positionHandler is a breaking change, since position handler\n   * is a public api and should be done just if extremely necessary\n   * @return {Record<string, TOCoord>}\n   */\n  calcOCoords(): Record<string, TOCoord> {\n    const vpt = this.getViewportTransform(),\n      center = this.getCenterPoint(),\n      tMatrix = createTranslateMatrix(center.x, center.y),\n      rMatrix = createRotateMatrix({\n        angle: this.getTotalAngle() - (!!this.group && this.flipX ? 180 : 0),\n      }),\n      positionMatrix = multiplyTransformMatrices(tMatrix, rMatrix),\n      startMatrix = multiplyTransformMatrices(vpt, positionMatrix),\n      finalMatrix = multiplyTransformMatrices(startMatrix, [\n        1 / vpt[0],\n        0,\n        0,\n        1 / vpt[3],\n        0,\n        0,\n      ]),\n      transformOptions = this.group\n        ? qrDecompose(this.calcTransformMatrix())\n        : undefined,\n      dim = this._calculateCurrentDimensions(transformOptions),\n      coords: Record<string, TOCoord> = {};\n\n    this.forEachControl((control, key) => {\n      const position = control.positionHandler(dim, finalMatrix, this, control);\n      // coords[key] are sometimes used as points. Those are points to which we add\n      // the property corner and touchCorner from `_calcCornerCoords`.\n      // don't remove this assign for an object spread.\n      coords[key] = Object.assign(\n        position,\n        this._calcCornerCoords(control, position)\n      );\n    });\n\n    // debug code\n    /*\n      const canvas = this.canvas;\n      setTimeout(function () {\n      if (!canvas) return;\n        canvas.contextTop.clearRect(0, 0, 700, 700);\n        canvas.contextTop.fillStyle = 'green';\n        Object.keys(coords).forEach(function(key) {\n          const control = coords[key];\n          canvas.contextTop.fillRect(control.x, control.y, 3, 3);\n        });\n      } 50);\n    */\n    return coords;\n  }\n\n  /**\n   * Sets the coordinates that determine the interaction area of each control\n   * note: if we would switch to ROUND corner area, all of this would disappear.\n   * everything would resolve to a single point and a pythagorean theorem for the distance\n   * @todo evaluate simplification of code switching to circle interaction area at runtime\n   * @private\n   */\n  private _calcCornerCoords(control: Control, position: Point) {\n    const angle = this.getTotalAngle();\n    const corner = control.calcCornerCoords(\n      angle,\n      this.cornerSize,\n      position.x,\n      position.y,\n      false,\n      this\n    );\n    const touchCorner = control.calcCornerCoords(\n      angle,\n      this.touchCornerSize,\n      position.x,\n      position.y,\n      true,\n      this\n    );\n    return { corner, touchCorner };\n  }\n\n  /**\n   * @override set controls' coordinates as well\n   * See {@link https://github.com/fabricjs/fabric.js/wiki/When-to-call-setCoords} and {@link http://fabricjs.com/fabric-gotchas}\n   * @return {void}\n   */\n  setCoords(): void {\n    super.setCoords();\n    this.canvas && (this.oCoords = this.calcOCoords());\n  }\n\n  /**\n   * Calls a function for each control. The function gets called,\n   * with the control, the control's key and the object that is calling the iterator\n   * @param {Function} fn function to iterate over the controls over\n   */\n  forEachControl(\n    fn: (\n      control: Control,\n      key: string,\n      fabricObject: InteractiveFabricObject\n    ) => any\n  ) {\n    for (const i in this.controls) {\n      fn(this.controls[i], i, this);\n    }\n  }\n\n  /**\n   * Draws a colored layer behind the object, inside its selection borders.\n   * Requires public options: padding, selectionBackgroundColor\n   * this function is called when the context is transformed\n   * has checks to be skipped when the object is on a staticCanvas\n   * @todo evaluate if make this disappear in favor of a pre-render hook for objects\n   * this was added by Andrea Bogazzi to make possible some feature for work reasons\n   * it seemed a good option, now is an edge case\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   */\n  drawSelectionBackground(ctx: CanvasRenderingContext2D): void {\n    if (\n      !this.selectionBackgroundColor ||\n      (this.canvas && (this.canvas._activeObject as unknown as this) !== this)\n    ) {\n      return;\n    }\n    ctx.save();\n    const center = this.getRelativeCenterPoint(),\n      wh = this._calculateCurrentDimensions(),\n      vpt = this.getViewportTransform();\n    ctx.translate(center.x, center.y);\n    ctx.scale(1 / vpt[0], 1 / vpt[3]);\n    ctx.rotate(degreesToRadians(this.angle));\n    ctx.fillStyle = this.selectionBackgroundColor;\n    ctx.fillRect(-wh.x / 2, -wh.y / 2, wh.x, wh.y);\n    ctx.restore();\n  }\n\n  /**\n   * @public override this function in order to customize the drawing of the control box, e.g. rounded corners, different border style.\n   * @param {CanvasRenderingContext2D} ctx ctx is rotated and translated so that (0,0) is at object's center\n   * @param {Point} size the control box size used\n   */\n  strokeBorders(ctx: CanvasRenderingContext2D, size: Point): void {\n    ctx.strokeRect(-size.x / 2, -size.y / 2, size.x, size.y);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {Point} size\n   * @param {TStyleOverride} styleOverride object to override the object style\n   */\n  _drawBorders(\n    ctx: CanvasRenderingContext2D,\n    size: Point,\n    styleOverride: TStyleOverride = {}\n  ): void {\n    const options = {\n      hasControls: this.hasControls,\n      borderColor: this.borderColor,\n      borderDashArray: this.borderDashArray,\n      ...styleOverride,\n    };\n    ctx.save();\n    ctx.strokeStyle = options.borderColor;\n    this._setLineDash(ctx, options.borderDashArray);\n    this.strokeBorders(ctx, size);\n    options.hasControls && this.drawControlsConnectingLines(ctx, size);\n    ctx.restore();\n  }\n\n  /**\n   * Renders controls and borders for the object\n   * the context here is not transformed\n   * @todo move to interactivity\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {TStyleOverride} [styleOverride] properties to override the object style\n   */\n  _renderControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride: TStyleOverride = {}\n  ) {\n    const { hasBorders, hasControls } = this;\n    const styleOptions = {\n      hasBorders,\n      hasControls,\n      ...styleOverride,\n    };\n    const vpt = this.getViewportTransform(),\n      shouldDrawBorders = styleOptions.hasBorders,\n      shouldDrawControls = styleOptions.hasControls;\n    const matrix = multiplyTransformMatrices(vpt, this.calcTransformMatrix());\n    const options = qrDecompose(matrix);\n    ctx.save();\n    ctx.translate(options.translateX, options.translateY);\n    ctx.lineWidth = 1 * this.borderScaleFactor;\n    // since interactive groups have been introduced, an object could be inside a group and needing controls\n    // the following equality check `this.group === this.parent` covers:\n    // object without a group ( undefined === undefined )\n    // object inside a group\n    // excludes object inside a group but multi selected since group and parent will differ in value\n    if (this.group === this.parent) {\n      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n    }\n    if (this.flipX) {\n      options.angle -= 180;\n    }\n    ctx.rotate(degreesToRadians(this.group ? options.angle : this.angle));\n    shouldDrawBorders && this.drawBorders(ctx, options, styleOverride);\n    shouldDrawControls && this.drawControls(ctx, styleOverride);\n    ctx.restore();\n  }\n\n  /**\n   * Draws borders of an object's bounding box.\n   * Requires public properties: width, height\n   * Requires public options: padding, borderColor\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {object} options object representing current object parameters\n   * @param {TStyleOverride} [styleOverride] object to override the object style\n   */\n  drawBorders(\n    ctx: CanvasRenderingContext2D,\n    options: TQrDecomposeOut,\n    styleOverride: TStyleOverride\n  ): void {\n    let size;\n    if ((styleOverride && styleOverride.forActiveSelection) || this.group) {\n      const bbox = sizeAfterTransform(\n          this.width,\n          this.height,\n          calcDimensionsMatrix(options)\n        ),\n        stroke = !this.isStrokeAccountedForInDimensions()\n          ? (this.strokeUniform\n              ? new Point().scalarAdd(this.canvas ? this.canvas.getZoom() : 1)\n              : // this is extremely confusing. options comes from the upper function\n                // and is the qrDecompose of a matrix that takes in account zoom too\n                new Point(options.scaleX, options.scaleY)\n            ).scalarMultiply(this.strokeWidth)\n          : ZERO;\n      size = bbox\n        .add(stroke)\n        .scalarAdd(this.borderScaleFactor)\n        .scalarAdd(this.padding * 2);\n    } else {\n      size = this._calculateCurrentDimensions().scalarAdd(\n        this.borderScaleFactor\n      );\n    }\n    this._drawBorders(ctx, size, styleOverride);\n  }\n\n  /**\n   * Draws lines from a borders of an object's bounding box to controls that have `withConnection` property set.\n   * Requires public properties: width, height\n   * Requires public options: padding, borderColor\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {Point} size object size x = width, y = height\n   */\n  drawControlsConnectingLines(\n    ctx: CanvasRenderingContext2D,\n    size: Point\n  ): void {\n    let shouldStroke = false;\n\n    ctx.beginPath();\n    this.forEachControl((control, key) => {\n      // in this moment, the ctx is centered on the object.\n      // width and height of the above function are the size of the bbox.\n      if (control.withConnection && control.getVisibility(this, key)) {\n        // reset movement for each control\n        shouldStroke = true;\n        ctx.moveTo(control.x * size.x, control.y * size.y);\n        ctx.lineTo(\n          control.x * size.x + control.offsetX,\n          control.y * size.y + control.offsetY\n        );\n      }\n    });\n    shouldStroke && ctx.stroke();\n  }\n\n  /**\n   * Draws corners of an object's bounding box.\n   * Requires public properties: width, height\n   * Requires public options: cornerSize, padding\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {ControlRenderingStyleOverride} styleOverride object to override the object style\n   */\n  drawControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride: ControlRenderingStyleOverride = {}\n  ) {\n    ctx.save();\n    const retinaScaling = this.getCanvasRetinaScaling();\n    const { cornerStrokeColor, cornerDashArray, cornerColor } = this;\n    const options = {\n      cornerStrokeColor,\n      cornerDashArray,\n      cornerColor,\n      ...styleOverride,\n    };\n    ctx.setTransform(retinaScaling, 0, 0, retinaScaling, 0, 0);\n    ctx.strokeStyle = ctx.fillStyle = options.cornerColor;\n    if (!this.transparentCorners) {\n      ctx.strokeStyle = options.cornerStrokeColor;\n    }\n    this._setLineDash(ctx, options.cornerDashArray);\n    this.setCoords();\n    this.forEachControl((control, key) => {\n      if (control.getVisibility(this, key)) {\n        const p = this.oCoords[key];\n        control.render(ctx, p.x, p.y, options, this);\n      }\n    });\n    ctx.restore();\n  }\n\n  /**\n   * Returns true if the specified control is visible, false otherwise.\n   * @param {string} controlKey The key of the control. Possible values are usually 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr',\n   * but since the control api allow for any control name, can be any string.\n   * @returns {boolean} true if the specified control is visible, false otherwise\n   */\n  isControlVisible(controlKey: string): boolean {\n    return (\n      this.controls[controlKey] &&\n      this.controls[controlKey].getVisibility(this, controlKey)\n    );\n  }\n\n  /**\n   * Sets the visibility of the specified control.\n   * please do not use.\n   * @param {String} controlKey The key of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n   * but since the control api allow for any control name, can be any string.\n   * @param {Boolean} visible true to set the specified control visible, false otherwise\n   * @todo discuss this overlap of priority here with the team. Andrea Bogazzi for details\n   */\n  setControlVisible(controlKey: string, visible: boolean) {\n    if (!this._controlsVisibility) {\n      this._controlsVisibility = {};\n    }\n    this._controlsVisibility[controlKey] = visible;\n  }\n\n  /**\n   * Sets the visibility state of object controls, this is just a bulk option for setControlVisible;\n   * @param {Record<string, boolean>} [options] with an optional key per control\n   * example: {Boolean} [options.bl] true to enable the bottom-left control, false to disable it\n   */\n  setControlsVisibility(options: Record<string, boolean> = {}) {\n    Object.entries(options).forEach(([controlKey, visibility]) =>\n      this.setControlVisible(controlKey, visibility)\n    );\n  }\n\n  /**\n   * Clears the canvas.contextTop in a specific area that corresponds to the object's bounding box\n   * that is in the canvas.contextContainer.\n   * This function is used to clear pieces of contextTop where we render ephemeral effects on top of the object.\n   * Example: blinking cursor text selection, drag effects.\n   * @todo discuss swapping restoreManually with a renderCallback, but think of async issues\n   * @param {Boolean} [restoreManually] When true won't restore the context after clear, in order to draw something else.\n   * @return {CanvasRenderingContext2D|undefined} canvas.contextTop that is either still transformed\n   * with the object transformMatrix, or restored to neutral transform\n   */\n  clearContextTop(\n    restoreManually?: boolean\n  ): CanvasRenderingContext2D | undefined {\n    if (!this.canvas) {\n      return;\n    }\n    const ctx = this.canvas.contextTop;\n    if (!ctx) {\n      return;\n    }\n    const v = this.canvas.viewportTransform;\n    ctx.save();\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n    this.transform(ctx);\n    // we add 4 pixel, to be sure to do not leave any pixel out\n    const width = this.width + 4,\n      height = this.height + 4;\n    ctx.clearRect(-width / 2, -height / 2, width, height);\n\n    restoreManually || ctx.restore();\n    return ctx;\n  }\n\n  /**\n   * This callback function is called every time _discardActiveObject or _setActiveObject\n   * try to to deselect this object. If the function returns true, the process is cancelled\n   * @param {Object} [options] options sent from the upper functions\n   * @param {TPointerEvent} [options.e] event if the process is generated by an event\n   * @param {FabricObject} [options.object] next object we are setting as active, and reason why\n   * this is being deselected\n   */\n  onDeselect(options?: {\n    e?: TPointerEvent;\n    object?: InteractiveFabricObject;\n  }): boolean {\n    // implemented by sub-classes, as needed.\n    return false;\n  }\n\n  /**\n   * This callback function is called every time _discardActiveObject or _setActiveObject\n   * try to to select this object. If the function returns true, the process is cancelled\n   * @param {Object} [options] options sent from the upper functions\n   * @param {Event} [options.e] event if the process is generated by an event\n   */\n  onSelect(options?: { e?: TPointerEvent }): boolean {\n    // implemented by sub-classes, as needed.\n    return false;\n  }\n\n  /**\n   * Override to customize Drag behavior\n   * Fired from {@link Canvas#_onMouseMove}\n   * @returns true in order for the window to start a drag session\n   */\n  shouldStartDragging() {\n    return false;\n  }\n\n  /**\n   * Override to customize Drag behavior\\\n   * Fired once a drag session has started\n   * @returns true to handle the drag event\n   */\n  onDragStart(e: DragEvent) {\n    return false;\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * @public\n   * @param {DragEvent} e\n   * @returns {boolean} true if the object currently dragged can be dropped on the target\n   */\n  canDrop(e: DragEvent): boolean {\n    return false;\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * render a specific effect when an object is the source of a drag event\n   * example: render the selection status for the part of text that is being dragged from a text object\n   * @public\n   * @param {DragEvent} e\n   */\n  renderDragSourceEffect(e: DragEvent) {\n    // for subclasses\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * render a specific effect when an object is the target of a drag event\n   * used to show that the underly object can receive a drop, or to show how the\n   * object will change when dropping. example: show the cursor where the text is about to be dropped\n   * @public\n   * @param {DragEvent} e\n   */\n  renderDropTargetEffect(e: DragEvent) {\n    // for subclasses\n  }\n}\n"],"names":["InteractiveFabricObject","FabricObject","getDefaults","_objectSpread","controls","createObjectDefaultControls","ownDefaults","_updateCacheCanvas","targetCanvas","canvas","noScaleCache","_currentTransform","transform","target","action","startsWith","getActiveControl","key","__corner","control","coord","oCoords","undefined","_findTargetCorner","pointer","forTouch","arguments","length","hasControls","cornerEntries","Object","entries","i","corner","shouldActivate","touchCorner","calcOCoords","vpt","getViewportTransform","center","getCenterPoint","tMatrix","createTranslateMatrix","x","y","rMatrix","createRotateMatrix","angle","getTotalAngle","group","flipX","positionMatrix","multiplyTransformMatrices","startMatrix","finalMatrix","transformOptions","qrDecompose","calcTransformMatrix","dim","_calculateCurrentDimensions","coords","forEachControl","position","positionHandler","assign","_calcCornerCoords","calcCornerCoords","cornerSize","touchCornerSize","setCoords","fn","drawSelectionBackground","ctx","selectionBackgroundColor","_activeObject","save","getRelativeCenterPoint","wh","translate","scale","rotate","degreesToRadians","fillStyle","fillRect","restore","strokeBorders","size","strokeRect","_drawBorders","styleOverride","options","borderColor","borderDashArray","strokeStyle","_setLineDash","drawControlsConnectingLines","_renderControls","hasBorders","styleOptions","shouldDrawBorders","shouldDrawControls","matrix","translateX","translateY","lineWidth","borderScaleFactor","parent","globalAlpha","isMoving","borderOpacityWhenMoving","drawBorders","drawControls","forActiveSelection","bbox","sizeAfterTransform","width","height","calcDimensionsMatrix","stroke","isStrokeAccountedForInDimensions","strokeUniform","Point","scalarAdd","getZoom","scaleX","scaleY","scalarMultiply","strokeWidth","ZERO","add","padding","shouldStroke","beginPath","withConnection","getVisibility","moveTo","lineTo","offsetX","offsetY","retinaScaling","getCanvasRetinaScaling","cornerStrokeColor","cornerDashArray","cornerColor","setTransform","transparentCorners","p","render","isControlVisible","controlKey","setControlVisible","visible","_controlsVisibility","setControlsVisibility","forEach","_ref","visibility","clearContextTop","restoreManually","contextTop","v","viewportTransform","clearRect","onDeselect","onSelect","shouldStartDragging","onDragStart","e","canDrop","renderDragSourceEffect","renderDropTargetEffect","_defineProperty","interactiveObjectDefaultValues"],"mappings":"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AED,KAAK,EAAEC,MAAM,CAAC,CAAA;AAErD0C,IAAAA,eAAe,IAAItF,GAAG,CAACY,OAAO,EAAE,CAAA;AAChC,IAAA,OAAOZ,GAAG,CAAA;AACZ,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE2F,UAAUA,CAACzE,OAGV,EAAW;AACV;AACA,IAAA,OAAO,KAAK,CAAA;AACd,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;EACE0E,QAAQA,CAAC1E,OAA+B,EAAW;AACjD;AACA,IAAA,OAAO,KAAK,CAAA;AACd,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACE2E,EAAAA,mBAAmBA,GAAG;AACpB,IAAA,OAAO,KAAK,CAAA;AACd,GAAA;;AAEA;AACF;AACA;AACA;AACA;EACEC,WAAWA,CAACC,CAAY,EAAE;AACxB,IAAA,OAAO,KAAK,CAAA;AACd,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;EACEC,OAAOA,CAACD,CAAY,EAAW;AAC7B,IAAA,OAAO,KAAK,CAAA;AACd,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEE,sBAAsBA,CAACF,CAAY,EAAE;AACnC;AAAA,GAAA;;AAGF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,sBAAsBA,CAACH,CAAY,EAAE;AACnC;AAAA,GAAA;AAEJ,CAAA;AAzlBE;AACF;AACA;AACA;AACA;AACA;AAGE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AAGE;AACF;AACA;AACA;AACA;AAGE;AACF;AACA;AACA;AAGE;AACF;AACA;AACA;AAGE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AAPEI,eAAA,CAnFW3K,uBAAuB,EAAA,aAAA,EA+Fb4K,8BAA8B,CAAA;;;;"}