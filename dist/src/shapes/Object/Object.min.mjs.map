{"version":3,"file":"Object.min.mjs","sources":["../../../../src/shapes/Object/Object.ts"],"sourcesContent":["import { cache } from '../../cache';\nimport { config } from '../../config';\nimport {\n  ALIASING_LIMIT,\n  CENTER,\n  iMatrix,\n  LEFT,\n  TOP,\n  VERSION,\n} from '../../constants';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport { AnimatableObject } from './AnimatableObject';\nimport { Point } from '../../Point';\nimport { Shadow } from '../../Shadow';\nimport type {\n  TDegree,\n  TFiller,\n  TSize,\n  TCacheCanvasDimensions,\n  Abortable,\n  TOptions,\n  ImageFormat,\n} from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport { runningAnimations } from '../../util/animation/AnimationRegistry';\nimport { cloneDeep } from '../../util/internals/cloneDeep';\nimport { capValue } from '../../util/misc/capValue';\nimport { createCanvasElement, toDataURL } from '../../util/misc/dom';\nimport { invertTransform, qrDecompose } from '../../util/misc/matrix';\nimport { enlivenObjectEnlivables } from '../../util/misc/objectEnlive';\nimport {\n  resetObjectTransform,\n  saveObjectTransform,\n} from '../../util/misc/objectTransforms';\nimport { sendObjectToPlane } from '../../util/misc/planeChange';\nimport { pick, pickBy } from '../../util/misc/pick';\nimport { toFixed } from '../../util/misc/toFixed';\nimport type { Group } from '../Group';\nimport { StaticCanvas } from '../../canvas/StaticCanvas';\nimport {\n  isFiller,\n  isSerializableFiller,\n  isTextObject,\n} from '../../util/typeAssertions';\nimport type { FabricImage } from '../Image';\nimport {\n  cacheProperties,\n  fabricObjectDefaultValues,\n  stateProperties,\n} from './defaultValues';\nimport type { Gradient } from '../../gradient/Gradient';\nimport type { Pattern } from '../../Pattern';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { SerializedObjectProps } from './types/SerializedObjectProps';\nimport type { ObjectProps } from './types/ObjectProps';\nimport { getDevicePixelRatio, getEnv } from '../../env';\nimport { log } from '../../util/internals/console';\n\nexport type TCachedFabricObject<T extends FabricObject = FabricObject> = T &\n  Required<\n    Pick<\n      T,\n      | 'zoomX'\n      | 'zoomY'\n      | '_cacheCanvas'\n      | '_cacheContext'\n      | 'cacheTranslationX'\n      | 'cacheTranslationY'\n    >\n  > & {\n    _cacheContext: CanvasRenderingContext2D;\n  };\n\nexport type ObjectToCanvasElementOptions = {\n  format?: ImageFormat;\n  /** Multiplier to scale by */\n  multiplier?: number;\n  /** Cropping left offset. Introduced in v1.2.14 */\n  left?: number;\n  /** Cropping top offset. Introduced in v1.2.14 */\n  top?: number;\n  /** Cropping width. Introduced in v1.2.14 */\n  width?: number;\n  /** Cropping height. Introduced in v1.2.14 */\n  height?: number;\n  /** Enable retina scaling for clone image. Introduce in 1.6.4 */\n  enableRetinaScaling?: boolean;\n  /** Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4 */\n  withoutTransform?: boolean;\n  /** Remove current object shadow. Introduced in 2.4.2 */\n  withoutShadow?: boolean;\n  /** Account for canvas viewport transform */\n  viewportTransform?: boolean;\n  /** Function to create the output canvas to export onto */\n  canvasProvider?: <T extends StaticCanvas>(el?: HTMLCanvasElement) => T;\n};\n\ntype toDataURLOptions = ObjectToCanvasElementOptions & {\n  quality?: number;\n};\n\n/**\n * Root object class from which all 2d shape classes inherit from\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#objects}\n *\n * @fires added\n * @fires removed\n *\n * @fires selected\n * @fires deselected\n *\n * @fires rotating\n * @fires scaling\n * @fires moving\n * @fires skewing\n * @fires modified\n *\n * @fires mousedown\n * @fires mouseup\n * @fires mouseover\n * @fires mouseout\n * @fires mousewheel\n * @fires mousedblclick\n *\n * @fires dragover\n * @fires dragenter\n * @fires dragleave\n * @fires drop\n */\nexport class FabricObject<\n    Props extends TOptions<ObjectProps> = Partial<ObjectProps>,\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents\n  >\n  extends AnimatableObject<EventSpec>\n  implements ObjectProps\n{\n  declare minScaleLimit: number;\n\n  declare opacity: number;\n\n  declare paintFirst: 'fill' | 'stroke';\n  declare fill: string | TFiller | null;\n  declare fillRule: CanvasFillRule;\n  declare stroke: string | TFiller | null;\n  declare strokeDashArray: number[] | null;\n  declare strokeDashOffset: number;\n  declare strokeLineCap: CanvasLineCap;\n  declare strokeLineJoin: CanvasLineJoin;\n  declare strokeMiterLimit: number;\n\n  declare globalCompositeOperation: GlobalCompositeOperation;\n  declare backgroundColor: string;\n\n  declare shadow: Shadow | null;\n\n  declare visible: boolean;\n\n  declare includeDefaultValues: boolean;\n  declare excludeFromExport: boolean;\n\n  declare objectCaching: boolean;\n\n  declare clipPath?: FabricObject;\n  declare inverted: boolean;\n  declare absolutePositioned: boolean;\n  declare centeredRotation: boolean;\n  declare centeredScaling: boolean;\n\n  /**\n   * This list of properties is used to check if the state of an object is changed.\n   * This state change now is only used for children of groups to understand if a group\n   * needs its cache regenerated during a .set call\n   * @type Array\n   */\n  static stateProperties: string[] = stateProperties;\n\n  /**\n   * List of properties to consider when checking if cache needs refresh\n   * Those properties are checked by\n   * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty\n   * and refreshed at the next render\n   * @type Array\n   */\n  static cacheProperties: string[] = cacheProperties;\n\n  /**\n   * When set to `true`, object's cache will be rerendered next render call.\n   * since 1.7.0\n   * @type Boolean\n   * @default true\n   */\n  declare dirty: boolean;\n\n  /**\n   * Quick access for the _cacheCanvas rendering context\n   * This is part of the objectCaching feature\n   * since 1.7.0\n   * @type boolean\n   * @default undefined\n   * @private\n   */\n  _cacheContext: CanvasRenderingContext2D | null = null;\n\n  /**\n   * A reference to the HTMLCanvasElement that is used to contain the cache of the object\n   * this canvas element is resized and cleared as needed\n   * Is marked private, you can read it, don't use it since it is handled by fabric\n   * since 1.7.0\n   * @type HTMLCanvasElement\n   * @default undefined\n   * @private\n   */\n  declare _cacheCanvas?: HTMLCanvasElement;\n\n  /**\n   * Size of the cache canvas, width\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare cacheWidth?: number;\n\n  /**\n   * Size of the cache canvas, height\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare cacheHeight?: number;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, X axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare zoomX?: number;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, Y axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare zoomY?: number;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, Y axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare cacheTranslationX?: number;\n\n  /**\n   * translation of the cacheCanvas away from the center, for subpixel accuracy and crispness\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare cacheTranslationY?: number;\n\n  /**\n   * A reference to the parent of the object, usually a Group\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare group?: Group;\n\n  /**\n   * Indicate if the object is sitting on a cache dedicated to it\n   * or is part of a larger cache for many object ( a group for example)\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare ownCaching?: boolean;\n\n  /**\n   * Private. indicates if the object inside a group is on a transformed context or not\n   * or is part of a larger cache for many object ( a group for example)\n   * @type boolean\n   * @default undefined\n   * @private\n   */\n  declare _transformDone?: boolean;\n\n  static ownDefaults = fabricObjectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return { ...FabricObject.ownDefaults };\n  }\n\n  /**\n   * The class type. Used to identify which class this is.\n   * This is used for serialization purposes and internally it can be used\n   * to identify classes. As a developer you could use `instance of Class`\n   * but to avoid importing all the code and blocking tree shaking we try\n   * to avoid doing that.\n   */\n  static type = 'FabricObject';\n\n  /**\n   * Legacy identifier of the class. Prefer using utils like isType or instanceOf\n   * Will be removed in fabric 7 or 8.\n   * The setter exists because is very hard to catch all the ways in which a type value\n   * could be set in the instance\n   * @TODO add sustainable warning message\n   * @type string\n   * @deprecated\n   */\n  get type() {\n    const name = (this.constructor as typeof FabricObject).type;\n    if (name === 'FabricObject') {\n      return 'object';\n    }\n    return name.toLowerCase();\n  }\n\n  set type(value) {\n    log('warn', 'Setting type has no effect', value);\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options: Props = {} as Props) {\n    super();\n    Object.assign(\n      this,\n      (this.constructor as typeof FabricObject).getDefaults()\n    );\n    this.setOptions(options);\n  }\n\n  /**\n   * Create a the canvas used to keep the cached copy of the object\n   * @private\n   */\n  _createCacheCanvas() {\n    this._cacheCanvas = createCanvasElement();\n    this._cacheContext = this._cacheCanvas.getContext('2d');\n    this._updateCacheCanvas();\n    // if canvas gets created, is empty, so dirty.\n    this.dirty = true;\n  }\n\n  /**\n   * Limit the cache dimensions so that X * Y do not cross config.perfLimitSizeTotal\n   * and each side do not cross fabric.cacheSideLimit\n   * those numbers are configurable so that you can get as much detail as you want\n   * making bargain with performances.\n   * @param {Object} dims\n   * @param {Object} dims.width width of canvas\n   * @param {Object} dims.height height of canvas\n   * @param {Object} dims.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @param {Object} dims.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _limitCacheSize(\n    dims: TSize & { zoomX: number; zoomY: number; capped: boolean } & any\n  ) {\n    const width = dims.width,\n      height = dims.height,\n      max = config.maxCacheSideLimit,\n      min = config.minCacheSideLimit;\n    if (\n      width <= max &&\n      height <= max &&\n      width * height <= config.perfLimitSizeTotal\n    ) {\n      if (width < min) {\n        dims.width = min;\n      }\n      if (height < min) {\n        dims.height = min;\n      }\n      return dims;\n    }\n    const ar = width / height,\n      [limX, limY] = cache.limitDimsByArea(ar),\n      x = capValue(min, limX, max),\n      y = capValue(min, limY, max);\n    if (width > x) {\n      dims.zoomX /= width / x;\n      dims.width = x;\n      dims.capped = true;\n    }\n    if (height > y) {\n      dims.zoomY /= height / y;\n      dims.height = y;\n      dims.capped = true;\n    }\n    return dims;\n  }\n\n  /**\n   * Return the dimension and the zoom level needed to create a cache canvas\n   * big enough to host the object to be cached.\n   * @private\n   * @return {Object}.x width of object to be cached\n   * @return {Object}.y height of object to be cached\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _getCacheCanvasDimensions(): TCacheCanvasDimensions {\n    const objectScale = this.getTotalObjectScaling(),\n      // calculate dimensions without skewing\n      dim = this._getTransformedDimensions({ skewX: 0, skewY: 0 }),\n      neededX = (dim.x * objectScale.x) / this.scaleX,\n      neededY = (dim.y * objectScale.y) / this.scaleY;\n    return {\n      // for sure this ALIASING_LIMIT is slightly creating problem\n      // in situation in which the cache canvas gets an upper limit\n      // also objectScale contains already scaleX and scaleY\n      width: neededX + ALIASING_LIMIT,\n      height: neededY + ALIASING_LIMIT,\n      zoomX: objectScale.x,\n      zoomY: objectScale.y,\n      x: neededX,\n      y: neededY,\n    };\n  }\n\n  /**\n   * Update width and height of the canvas for cache\n   * returns true or false if canvas needed resize.\n   * @private\n   * @return {Boolean} true if the canvas has been resized\n   */\n  _updateCacheCanvas() {\n    const canvas = this._cacheCanvas,\n      context = this._cacheContext,\n      dims = this._limitCacheSize(this._getCacheCanvasDimensions()),\n      minCacheSize = config.minCacheSideLimit,\n      width = dims.width,\n      height = dims.height,\n      zoomX = dims.zoomX,\n      zoomY = dims.zoomY,\n      dimensionsChanged =\n        width !== this.cacheWidth || height !== this.cacheHeight,\n      zoomChanged = this.zoomX !== zoomX || this.zoomY !== zoomY;\n\n    if (!canvas || !context) {\n      return false;\n    }\n\n    let drawingWidth,\n      drawingHeight,\n      shouldRedraw = dimensionsChanged || zoomChanged,\n      additionalWidth = 0,\n      additionalHeight = 0,\n      shouldResizeCanvas = false;\n\n    if (dimensionsChanged) {\n      const canvasWidth = (this._cacheCanvas as HTMLCanvasElement).width,\n        canvasHeight = (this._cacheCanvas as HTMLCanvasElement).height,\n        sizeGrowing = width > canvasWidth || height > canvasHeight,\n        sizeShrinking =\n          (width < canvasWidth * 0.9 || height < canvasHeight * 0.9) &&\n          canvasWidth > minCacheSize &&\n          canvasHeight > minCacheSize;\n      shouldResizeCanvas = sizeGrowing || sizeShrinking;\n      if (\n        sizeGrowing &&\n        !dims.capped &&\n        (width > minCacheSize || height > minCacheSize)\n      ) {\n        additionalWidth = width * 0.1;\n        additionalHeight = height * 0.1;\n      }\n    }\n    if (isTextObject(this) && this.path) {\n      shouldRedraw = true;\n      shouldResizeCanvas = true;\n      // IMHO in those lines we are using zoomX and zoomY not the this version.\n      additionalWidth += this.getHeightOfLine(0) * this.zoomX!;\n      additionalHeight += this.getHeightOfLine(0) * this.zoomY!;\n    }\n    if (shouldRedraw) {\n      if (shouldResizeCanvas) {\n        canvas.width = Math.ceil(width + additionalWidth);\n        canvas.height = Math.ceil(height + additionalHeight);\n      } else {\n        context.setTransform(1, 0, 0, 1, 0, 0);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n      }\n      drawingWidth = dims.x / 2;\n      drawingHeight = dims.y / 2;\n      this.cacheTranslationX =\n        Math.round(canvas.width / 2 - drawingWidth) + drawingWidth;\n      this.cacheTranslationY =\n        Math.round(canvas.height / 2 - drawingHeight) + drawingHeight;\n      this.cacheWidth = width;\n      this.cacheHeight = height;\n      context.translate(this.cacheTranslationX, this.cacheTranslationY);\n      context.scale(zoomX, zoomY);\n      this.zoomX = zoomX;\n      this.zoomY = zoomY;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Sets object's properties from options, for class constructor only.\n   * Needs to be overridden for different defaults.\n   * @protected\n   * @param {Object} [options] Options object\n   */\n  protected setOptions(options: Record<string, any> = {}) {\n    this._setOptions(options);\n  }\n\n  /**\n   * Transforms context when rendering an object\n   * @param {CanvasRenderingContext2D} ctx Context\n   */\n  transform(ctx: CanvasRenderingContext2D) {\n    const needFullTransform =\n      (this.group && !this.group._transformDone) ||\n      (this.group && this.canvas && ctx === (this.canvas as Canvas).contextTop);\n    const m = this.calcTransformMatrix(!needFullTransform);\n    ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n  }\n\n  /**\n   * Returns an object representation of an instance\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject(propertiesToInclude: any[] = []): any {\n    const NUM_FRACTION_DIGITS = config.NUM_FRACTION_DIGITS,\n      clipPathData =\n        this.clipPath && !this.clipPath.excludeFromExport\n          ? {\n              ...this.clipPath.toObject(propertiesToInclude),\n              inverted: this.clipPath.inverted,\n              absolutePositioned: this.clipPath.absolutePositioned,\n            }\n          : null,\n      object = {\n        ...pick(this, propertiesToInclude as (keyof this)[]),\n        type: (this.constructor as typeof FabricObject).type,\n        version: VERSION,\n        originX: this.originX,\n        originY: this.originY,\n        left: toFixed(this.left, NUM_FRACTION_DIGITS),\n        top: toFixed(this.top, NUM_FRACTION_DIGITS),\n        width: toFixed(this.width, NUM_FRACTION_DIGITS),\n        height: toFixed(this.height, NUM_FRACTION_DIGITS),\n        fill: isSerializableFiller(this.fill)\n          ? this.fill.toObject()\n          : this.fill,\n        stroke: isSerializableFiller(this.stroke)\n          ? this.stroke.toObject()\n          : this.stroke,\n        strokeWidth: toFixed(this.strokeWidth, NUM_FRACTION_DIGITS),\n        strokeDashArray: this.strokeDashArray\n          ? this.strokeDashArray.concat()\n          : this.strokeDashArray,\n        strokeLineCap: this.strokeLineCap,\n        strokeDashOffset: this.strokeDashOffset,\n        strokeLineJoin: this.strokeLineJoin,\n        strokeUniform: this.strokeUniform,\n        strokeMiterLimit: toFixed(this.strokeMiterLimit, NUM_FRACTION_DIGITS),\n        scaleX: toFixed(this.scaleX, NUM_FRACTION_DIGITS),\n        scaleY: toFixed(this.scaleY, NUM_FRACTION_DIGITS),\n        angle: toFixed(this.angle, NUM_FRACTION_DIGITS),\n        flipX: this.flipX,\n        flipY: this.flipY,\n        opacity: toFixed(this.opacity, NUM_FRACTION_DIGITS),\n        shadow:\n          this.shadow && this.shadow.toObject\n            ? this.shadow.toObject()\n            : this.shadow,\n        visible: this.visible,\n        backgroundColor: this.backgroundColor,\n        fillRule: this.fillRule,\n        paintFirst: this.paintFirst,\n        globalCompositeOperation: this.globalCompositeOperation,\n        skewX: toFixed(this.skewX, NUM_FRACTION_DIGITS),\n        skewY: toFixed(this.skewY, NUM_FRACTION_DIGITS),\n        ...(clipPathData ? { clipPath: clipPathData } : null),\n      };\n\n    return !this.includeDefaultValues\n      ? this._removeDefaultValues(object)\n      : object;\n  }\n\n  /**\n   * Returns (dataless) object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toDatalessObject(propertiesToInclude?: any[]): any {\n    // will be overwritten by subclasses\n    return this.toObject(propertiesToInclude);\n  }\n\n  /**\n   * @private\n   * @param {Object} object\n   */\n  _removeDefaultValues<T extends object>(object: T): Partial<T> {\n    // getDefaults() ( get from static ownDefaults ) should win over prototype since anyway they get assigned to instance\n    // ownDefault vs prototype is swappable only if you change all the fabric objects consistently.\n    const defaults = (this.constructor as typeof FabricObject).getDefaults();\n    const hasStaticDefaultValues = Object.keys(defaults).length > 0;\n    const baseValues = hasStaticDefaultValues\n      ? defaults\n      : Object.getPrototypeOf(this);\n\n    return pickBy(object, (value, key) => {\n      if (key === LEFT || key === TOP || key === 'type') {\n        return true;\n      }\n      const baseValue = baseValues[key];\n      return (\n        value !== baseValue &&\n        // basically a check for [] === []\n        !(\n          Array.isArray(value) &&\n          Array.isArray(baseValue) &&\n          value.length === 0 &&\n          baseValue.length === 0\n        )\n      );\n    });\n  }\n\n  /**\n   * Returns a string representation of an instance\n   * @return {String}\n   */\n  toString() {\n    return `#<${(this.constructor as typeof FabricObject).type}>`;\n  }\n\n  /**\n   * Return the object scale factor counting also the group scaling\n   * @return {Point}\n   */\n  getObjectScaling() {\n    // if the object is a top level one, on the canvas, we go for simple aritmetic\n    // otherwise the complex method with angles will return approximations and decimals\n    // and will likely kill the cache when not needed\n    // https://github.com/fabricjs/fabric.js/issues/7157\n    if (!this.group) {\n      return new Point(Math.abs(this.scaleX), Math.abs(this.scaleY));\n    }\n    // if we are inside a group total zoom calculation is complex, we defer to generic matrices\n    const options = qrDecompose(this.calcTransformMatrix());\n    return new Point(Math.abs(options.scaleX), Math.abs(options.scaleY));\n  }\n\n  /**\n   * Return the object scale factor counting also the group scaling, zoom and retina\n   * @return {Object} object with scaleX and scaleY properties\n   */\n  getTotalObjectScaling() {\n    const scale = this.getObjectScaling();\n    if (this.canvas) {\n      const zoom = this.canvas.getZoom();\n      const retina = this.getCanvasRetinaScaling();\n      return scale.scalarMultiply(zoom * retina);\n    }\n    return scale;\n  }\n\n  /**\n   * Return the object opacity counting also the group property\n   * @return {Number}\n   */\n  getObjectOpacity() {\n    let opacity = this.opacity;\n    if (this.group) {\n      opacity *= this.group.getObjectOpacity();\n    }\n    return opacity;\n  }\n\n  /**\n   * Makes sure the scale is valid and modifies it if necessary\n   * @todo: this is a control action issue, not a geometry one\n   * @private\n   * @param {Number} value, unconstrained\n   * @return {Number} constrained value;\n   */\n  _constrainScale(value: number): number {\n    if (Math.abs(value) < this.minScaleLimit) {\n      if (value < 0) {\n        return -this.minScaleLimit;\n      } else {\n        return this.minScaleLimit;\n      }\n    } else if (value === 0) {\n      return 0.0001;\n    }\n    return value;\n  }\n\n  /**\n   * Handles setting values on the instance and handling internal side effects\n   * @protected\n   * @param {String} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    const isChanged = this[key as keyof this] !== value;\n\n    if (key === 'scaleX' || key === 'scaleY') {\n      value = this._constrainScale(value);\n    }\n    if (key === 'scaleX' && value < 0) {\n      this.flipX = !this.flipX;\n      value *= -1;\n    } else if (key === 'scaleY' && value < 0) {\n      this.flipY = !this.flipY;\n      value *= -1;\n      // i don't like this automatic initialization here\n    } else if (key === 'shadow' && value && !(value instanceof Shadow)) {\n      value = new Shadow(value);\n    } else if (key === 'dirty' && this.group && value) {\n      // a dirty child makes the parent dirty\n      // but a non dirty child will not make the parent non dirty.\n      // the parent could be dirty for some other reason\n      this.group.set('dirty', value);\n    }\n\n    this[key as keyof this] = value;\n\n    if (isChanged) {\n      const groupNeedsUpdate = this.group && this.group.isOnACache();\n      if (\n        (this.constructor as typeof FabricObject).cacheProperties.includes(key)\n      ) {\n        this.dirty = true;\n        groupNeedsUpdate && this.group!.set('dirty', true);\n      } else if (\n        groupNeedsUpdate &&\n        (this.constructor as typeof FabricObject).stateProperties.includes(key)\n      ) {\n        this.group!.set('dirty', true);\n      }\n    }\n    return this;\n  }\n\n  /*\n   * @private\n   * return if the object would be visible in rendering\n   * @memberOf FabricObject.prototype\n   * @return {Boolean}\n   */\n  isNotVisible() {\n    return (\n      this.opacity === 0 ||\n      (!this.width && !this.height && this.strokeWidth === 0) ||\n      !this.visible\n    );\n  }\n\n  /**\n   * Renders an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    // do not render if width/height are zeros or object is not visible\n    if (this.isNotVisible()) {\n      return;\n    }\n    if (\n      this.canvas &&\n      this.canvas.skipOffscreen &&\n      !this.group &&\n      !this.isOnScreen()\n    ) {\n      return;\n    }\n    ctx.save();\n    this._setupCompositeOperation(ctx);\n    this.drawSelectionBackground(ctx);\n    this.transform(ctx);\n    this._setOpacity(ctx);\n    this._setShadow(ctx);\n    if (this.shouldCache()) {\n      this.renderCache();\n      (this as TCachedFabricObject).drawCacheOnCanvas(ctx);\n    } else {\n      this._removeCacheCanvas();\n      this.drawObject(ctx);\n      this.dirty = false;\n    }\n    ctx.restore();\n  }\n\n  drawSelectionBackground(ctx: CanvasRenderingContext2D) {\n    /* no op */\n  }\n\n  renderCache(options?: any) {\n    options = options || {};\n    if (!this._cacheCanvas || !this._cacheContext) {\n      this._createCacheCanvas();\n    }\n    if (this.isCacheDirty() && this._cacheContext) {\n      this.drawObject(this._cacheContext, options.forClipping);\n      this.dirty = false;\n    }\n  }\n\n  /**\n   * Remove cacheCanvas and its dimensions from the objects\n   */\n  _removeCacheCanvas() {\n    this._cacheCanvas = undefined;\n    this._cacheContext = null;\n    this.cacheWidth = 0;\n    this.cacheHeight = 0;\n  }\n\n  /**\n   * return true if the object will draw a stroke\n   * Does not consider text styles. This is just a shortcut used at rendering time\n   * We want it to be an approximation and be fast.\n   * wrote to avoid extra caching, it has to return true when stroke happens,\n   * can guess when it will not happen at 100% chance, does not matter if it misses\n   * some use case where the stroke is invisible.\n   * @since 3.0.0\n   * @returns Boolean\n   */\n  hasStroke() {\n    return (\n      this.stroke && this.stroke !== 'transparent' && this.strokeWidth !== 0\n    );\n  }\n\n  /**\n   * return true if the object will draw a fill\n   * Does not consider text styles. This is just a shortcut used at rendering time\n   * We want it to be an approximation and be fast.\n   * wrote to avoid extra caching, it has to return true when fill happens,\n   * can guess when it will not happen at 100% chance, does not matter if it misses\n   * some use case where the fill is invisible.\n   * @since 3.0.0\n   * @returns Boolean\n   */\n  hasFill() {\n    return this.fill && this.fill !== 'transparent';\n  }\n\n  /**\n   * When set to `true`, force the object to have its own cache, even if it is inside a group\n   * it may be needed when your object behave in a particular way on the cache and always needs\n   * its own isolated canvas to render correctly.\n   * Created to be overridden\n   * since 1.7.12\n   * @returns Boolean\n   */\n  needsItsOwnCache() {\n    if (\n      this.paintFirst === 'stroke' &&\n      this.hasFill() &&\n      this.hasStroke() &&\n      !!this.shadow\n    ) {\n      return true;\n    }\n    if (this.clipPath) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Decide if the object should cache or not. Create its own cache level\n   * objectCaching is a global flag, wins over everything\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step. None of the fabric classes requires it.\n   * Generally you do not cache objects in groups because the group outside is cached.\n   * Read as: cache if is needed, or if the feature is enabled but we are not already caching.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    this.ownCaching =\n      this.needsItsOwnCache() ||\n      (this.objectCaching && (!this.group || !this.group.isOnACache()));\n    return this.ownCaching;\n  }\n\n  /**\n   * Check if this object will cast a shadow with an offset.\n   * used by Group.shouldCache to know if child has a shadow recursively\n   * @return {Boolean}\n   * @deprecated\n   */\n  willDrawShadow() {\n    return (\n      !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0)\n    );\n  }\n\n  /**\n   * Execute the drawing operation for an object clipPath\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {FabricObject} clipPath\n   */\n  drawClipPathOnCache(\n    ctx: CanvasRenderingContext2D,\n    clipPath: TCachedFabricObject\n  ) {\n    ctx.save();\n    // DEBUG: uncomment this line, comment the following\n    // ctx.globalAlpha = 0.4\n    if (clipPath.inverted) {\n      ctx.globalCompositeOperation = 'destination-out';\n    } else {\n      ctx.globalCompositeOperation = 'destination-in';\n    }\n    //ctx.scale(1 / 2, 1 / 2);\n    if (clipPath.absolutePositioned) {\n      const m = invertTransform(this.calcTransformMatrix());\n      ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n    }\n    clipPath.transform(ctx);\n    ctx.scale(1 / clipPath.zoomX, 1 / clipPath.zoomY);\n    ctx.drawImage(\n      clipPath._cacheCanvas,\n      -clipPath.cacheTranslationX,\n      -clipPath.cacheTranslationY\n    );\n    ctx.restore();\n  }\n\n  /**\n   * Execute the drawing operation for an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {boolean} forClipping apply clipping styles\n   */\n  drawObject(ctx: CanvasRenderingContext2D, forClipping?: boolean) {\n    const originalFill = this.fill,\n      originalStroke = this.stroke;\n    if (forClipping) {\n      this.fill = 'black';\n      this.stroke = '';\n      this._setClippingProperties(ctx);\n    } else {\n      this._renderBackground(ctx);\n    }\n    this._render(ctx);\n    this._drawClipPath(ctx, this.clipPath);\n    this.fill = originalFill;\n    this.stroke = originalStroke;\n  }\n\n  /**\n   * Prepare clipPath state and cache and draw it on instance's cache\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {FabricObject} clipPath\n   */\n  _drawClipPath(ctx: CanvasRenderingContext2D, clipPath?: FabricObject) {\n    if (!clipPath) {\n      return;\n    }\n    // needed to setup a couple of variables\n    // path canvas gets overridden with this one.\n    // TODO find a better solution?\n    clipPath._set('canvas', this.canvas);\n    clipPath.shouldCache();\n    clipPath._transformDone = true;\n    clipPath.renderCache({ forClipping: true });\n    this.drawClipPathOnCache(ctx, clipPath as TCachedFabricObject);\n  }\n\n  /**\n   * Paint the cached copy of the object on the target context.\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawCacheOnCanvas(this: TCachedFabricObject, ctx: CanvasRenderingContext2D) {\n    ctx.scale(1 / this.zoomX, 1 / this.zoomY);\n    ctx.drawImage(\n      this._cacheCanvas,\n      -this.cacheTranslationX,\n      -this.cacheTranslationY\n    );\n  }\n\n  /**\n   * Check if cache is dirty\n   * @param {Boolean} skipCanvas skip canvas checks because this object is painted\n   * on parent canvas.\n   */\n  isCacheDirty(skipCanvas = false) {\n    if (this.isNotVisible()) {\n      return false;\n    }\n    if (\n      this._cacheCanvas &&\n      this._cacheContext &&\n      !skipCanvas &&\n      this._updateCacheCanvas()\n    ) {\n      // in this case the context is already cleared.\n      return true;\n    } else {\n      if (this.dirty || (this.clipPath && this.clipPath.absolutePositioned)) {\n        if (this._cacheCanvas && this._cacheContext && !skipCanvas) {\n          const width = this.cacheWidth! / this.zoomX!;\n          const height = this.cacheHeight! / this.zoomY!;\n          this._cacheContext.clearRect(-width / 2, -height / 2, width, height);\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Draws a background for the object big as its untransformed dimensions\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderBackground(ctx: CanvasRenderingContext2D) {\n    if (!this.backgroundColor) {\n      return;\n    }\n    const dim = this._getNonTransformedDimensions();\n    ctx.fillStyle = this.backgroundColor;\n\n    ctx.fillRect(-dim.x / 2, -dim.y / 2, dim.x, dim.y);\n    // if there is background color no other shadows\n    // should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _setOpacity(ctx: CanvasRenderingContext2D) {\n    if (this.group && !this.group._transformDone) {\n      ctx.globalAlpha = this.getObjectOpacity();\n    } else {\n      ctx.globalAlpha *= this.opacity;\n    }\n  }\n\n  _setStrokeStyles(\n    ctx: CanvasRenderingContext2D,\n    decl: Pick<\n      this,\n      | 'stroke'\n      | 'strokeWidth'\n      | 'strokeLineCap'\n      | 'strokeDashOffset'\n      | 'strokeLineJoin'\n      | 'strokeMiterLimit'\n    >\n  ) {\n    const stroke = decl.stroke;\n    if (stroke) {\n      ctx.lineWidth = decl.strokeWidth;\n      ctx.lineCap = decl.strokeLineCap;\n      ctx.lineDashOffset = decl.strokeDashOffset;\n      ctx.lineJoin = decl.strokeLineJoin;\n      ctx.miterLimit = decl.strokeMiterLimit;\n      if (isFiller(stroke)) {\n        if (\n          (stroke as Gradient<'linear'>).gradientUnits === 'percentage' ||\n          (stroke as Gradient<'linear'>).gradientTransform ||\n          (stroke as Pattern).patternTransform\n        ) {\n          // need to transform gradient in a pattern.\n          // this is a slow process. If you are hitting this codepath, and the object\n          // is not using caching, you should consider switching it on.\n          // we need a canvas as big as the current object caching canvas.\n          this._applyPatternForTransformedGradient(ctx, stroke);\n        } else {\n          // is a simple gradient or pattern\n          ctx.strokeStyle = stroke.toLive(ctx)!;\n          this._applyPatternGradientTransform(ctx, stroke);\n        }\n      } else {\n        // is a color\n        ctx.strokeStyle = decl.stroke as string;\n      }\n    }\n  }\n\n  _setFillStyles(ctx: CanvasRenderingContext2D, { fill }: Pick<this, 'fill'>) {\n    if (fill) {\n      if (isFiller(fill)) {\n        ctx.fillStyle = fill.toLive(ctx)!;\n        this._applyPatternGradientTransform(ctx, fill);\n      } else {\n        ctx.fillStyle = fill;\n      }\n    }\n  }\n\n  _setClippingProperties(ctx: CanvasRenderingContext2D) {\n    ctx.globalAlpha = 1;\n    ctx.strokeStyle = 'transparent';\n    ctx.fillStyle = '#000000';\n  }\n\n  /**\n   * @private\n   * Sets line dash\n   * @param {CanvasRenderingContext2D} ctx Context to set the dash line on\n   * @param {Array} dashArray array representing dashes\n   */\n  _setLineDash(ctx: CanvasRenderingContext2D, dashArray?: number[] | null) {\n    if (!dashArray || dashArray.length === 0) {\n      return;\n    }\n    // Spec requires the concatenation of two copies of the dash array when the number of elements is odd\n    if (1 & dashArray.length) {\n      dashArray.push(...dashArray);\n    }\n    ctx.setLineDash(dashArray);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _setShadow(ctx: CanvasRenderingContext2D) {\n    if (!this.shadow) {\n      return;\n    }\n\n    const shadow = this.shadow,\n      canvas = this.canvas,\n      retinaScaling = this.getCanvasRetinaScaling(),\n      [sx, , , sy] = canvas?.viewportTransform || iMatrix,\n      multX = sx * retinaScaling,\n      multY = sy * retinaScaling,\n      scaling = shadow.nonScaling ? new Point(1, 1) : this.getObjectScaling();\n    ctx.shadowColor = shadow.color;\n    ctx.shadowBlur =\n      (shadow.blur *\n        config.browserShadowBlurConstant *\n        (multX + multY) *\n        (scaling.x + scaling.y)) /\n      4;\n    ctx.shadowOffsetX = shadow.offsetX * multX * scaling.x;\n    ctx.shadowOffsetY = shadow.offsetY * multY * scaling.y;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _removeShadow(ctx: CanvasRenderingContext2D) {\n    if (!this.shadow) {\n      return;\n    }\n\n    ctx.shadowColor = '';\n    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {TFiller} filler {@link Pattern} or {@link Gradient}\n   */\n  _applyPatternGradientTransform(\n    ctx: CanvasRenderingContext2D,\n    filler: TFiller\n  ) {\n    if (!isFiller(filler)) {\n      return { offsetX: 0, offsetY: 0 };\n    }\n    const t =\n      (filler as Gradient<'linear'>).gradientTransform ||\n      (filler as Pattern).patternTransform;\n    const offsetX = -this.width / 2 + filler.offsetX || 0,\n      offsetY = -this.height / 2 + filler.offsetY || 0;\n\n    if ((filler as Gradient<'linear'>).gradientUnits === 'percentage') {\n      ctx.transform(this.width, 0, 0, this.height, offsetX, offsetY);\n    } else {\n      ctx.transform(1, 0, 0, 1, offsetX, offsetY);\n    }\n    if (t) {\n      ctx.transform(t[0], t[1], t[2], t[3], t[4], t[5]);\n    }\n    return { offsetX: offsetX, offsetY: offsetY };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderPaintInOrder(ctx: CanvasRenderingContext2D) {\n    if (this.paintFirst === 'stroke') {\n      this._renderStroke(ctx);\n      this._renderFill(ctx);\n    } else {\n      this._renderFill(ctx);\n      this._renderStroke(ctx);\n    }\n  }\n\n  /**\n   * @private\n   * function that actually render something on the context.\n   * empty here to allow Obects to work on tests to benchmark fabric functionalites\n   * not related to rendering\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    // placeholder to be overridden\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderFill(ctx: CanvasRenderingContext2D) {\n    if (!this.fill) {\n      return;\n    }\n\n    ctx.save();\n    this._setFillStyles(ctx, this);\n    if (this.fillRule === 'evenodd') {\n      ctx.fill('evenodd');\n    } else {\n      ctx.fill();\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderStroke(ctx: CanvasRenderingContext2D) {\n    if (!this.stroke || this.strokeWidth === 0) {\n      return;\n    }\n\n    if (this.shadow && !this.shadow.affectStroke) {\n      this._removeShadow(ctx);\n    }\n\n    ctx.save();\n    if (this.strokeUniform) {\n      const scaling = this.getObjectScaling();\n      ctx.scale(1 / scaling.x, 1 / scaling.y);\n    }\n    this._setLineDash(ctx, this.strokeDashArray);\n    this._setStrokeStyles(ctx, this);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  /**\n   * This function try to patch the missing gradientTransform on canvas gradients.\n   * transforming a context to transform the gradient, is going to transform the stroke too.\n   * we want to transform the gradient but not the stroke operation, so we create\n   * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\n   * this method has drawbacks: is slow, is in low resolution, needs a patch for when the size\n   * is limited.\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Gradient} filler\n   */\n  _applyPatternForTransformedGradient(\n    ctx: CanvasRenderingContext2D,\n    filler: TFiller\n  ) {\n    const dims = this._limitCacheSize(this._getCacheCanvasDimensions()),\n      pCanvas = createCanvasElement(),\n      retinaScaling = this.getCanvasRetinaScaling(),\n      width = dims.x / this.scaleX / retinaScaling,\n      height = dims.y / this.scaleY / retinaScaling;\n    // in case width and height are less than 1px, we have to round up.\n    // since the pattern is no-repeat, this is fine\n    pCanvas.width = Math.ceil(width);\n    pCanvas.height = Math.ceil(height);\n    const pCtx = pCanvas.getContext('2d');\n    if (!pCtx) {\n      return;\n    }\n    pCtx.beginPath();\n    pCtx.moveTo(0, 0);\n    pCtx.lineTo(width, 0);\n    pCtx.lineTo(width, height);\n    pCtx.lineTo(0, height);\n    pCtx.closePath();\n    pCtx.translate(width / 2, height / 2);\n    pCtx.scale(\n      dims.zoomX / this.scaleX / retinaScaling,\n      dims.zoomY / this.scaleY / retinaScaling\n    );\n    this._applyPatternGradientTransform(pCtx, filler);\n    pCtx.fillStyle = filler.toLive(ctx)!;\n    pCtx.fill();\n    ctx.translate(\n      -this.width / 2 - this.strokeWidth / 2,\n      -this.height / 2 - this.strokeWidth / 2\n    );\n    ctx.scale(\n      (retinaScaling * this.scaleX) / dims.zoomX,\n      (retinaScaling * this.scaleY) / dims.zoomY\n    );\n    ctx.strokeStyle = pCtx.createPattern(pCanvas, 'no-repeat') ?? '';\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement() {\n    return new Point(this.left + this.width / 2, this.top + this.height / 2);\n  }\n\n  /**\n   * Clones an instance.\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @returns {Promise<FabricObject>}\n   */\n  clone(propertiesToInclude?: string[]): Promise<this> {\n    const objectForm = this.toObject(propertiesToInclude);\n    return (this.constructor as typeof FabricObject).fromObject(\n      objectForm\n    ) as unknown as Promise<this>;\n  }\n\n  /**\n   * Creates an instance of Image out of an object\n   * makes use of toCanvasElement.\n   * Once this method was based on toDataUrl and loadImage, so it also had a quality\n   * and format option. toCanvasElement is faster and produce no loss of quality.\n   * If you need to get a real Jpeg or Png from an object, using toDataURL is the right way to do it.\n   * toCanvasElement and then toBlob from the obtained canvas is also a good option.\n   * @todo fix the export type, it could not be Image but the type that getClass return for 'image'.\n   * @param {ObjectToCanvasElementOptions} [options] for clone as image, passed to toDataURL\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @return {FabricImage} Object cloned as image.\n   */\n  cloneAsImage(options: ObjectToCanvasElementOptions): FabricImage {\n    const canvasEl = this.toCanvasElement(options);\n    // TODO: how to import Image w/o an import cycle?\n    const ImageClass = classRegistry.getClass<typeof FabricImage>('image');\n    return new ImageClass(canvasEl);\n  }\n\n  /**\n   * Converts an object into a HTMLCanvas element\n   * @param {ObjectToCanvasElementOptions} options Options object\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @param {Boolean} [options.viewportTransform] Account for canvas viewport transform\n   * @param {(el?: HTMLCanvasElement) => StaticCanvas} [options.canvasProvider] Create the output canvas\n   * @return {HTMLCanvasElement} Returns DOM element <canvas> with the FabricObject\n   */\n  toCanvasElement(options: ObjectToCanvasElementOptions = {}) {\n    const origParams = saveObjectTransform(this),\n      originalGroup = this.group,\n      originalShadow = this.shadow,\n      abs = Math.abs,\n      retinaScaling = options.enableRetinaScaling ? getDevicePixelRatio() : 1,\n      multiplier = (options.multiplier || 1) * retinaScaling,\n      canvasProvider: (el: HTMLCanvasElement) => StaticCanvas =\n        options.canvasProvider ||\n        ((el: HTMLCanvasElement) =>\n          new StaticCanvas(el, {\n            enableRetinaScaling: false,\n            renderOnAddRemove: false,\n            skipOffscreen: false,\n          }));\n    delete this.group;\n    if (options.withoutTransform) {\n      resetObjectTransform(this);\n    }\n    if (options.withoutShadow) {\n      this.shadow = null;\n    }\n    if (options.viewportTransform) {\n      sendObjectToPlane(this, this.getViewportTransform());\n    }\n\n    this.setCoords();\n    const el = createCanvasElement(),\n      boundingRect = this.getBoundingRect(),\n      shadow = this.shadow,\n      shadowOffset = new Point();\n\n    if (shadow) {\n      const shadowBlur = shadow.blur;\n      const scaling = shadow.nonScaling\n        ? new Point(1, 1)\n        : this.getObjectScaling();\n      // consider non scaling shadow.\n      shadowOffset.x =\n        2 * Math.round(abs(shadow.offsetX) + shadowBlur) * abs(scaling.x);\n      shadowOffset.y =\n        2 * Math.round(abs(shadow.offsetY) + shadowBlur) * abs(scaling.y);\n    }\n    const width = boundingRect.width + shadowOffset.x,\n      height = boundingRect.height + shadowOffset.y;\n    // if the current width/height is not an integer\n    // we need to make it so.\n    el.width = Math.ceil(width);\n    el.height = Math.ceil(height);\n    const canvas = canvasProvider(el);\n    if (options.format === 'jpeg') {\n      canvas.backgroundColor = '#fff';\n    }\n    this.setPositionByOrigin(\n      new Point(canvas.width / 2, canvas.height / 2),\n      CENTER,\n      CENTER\n    );\n    const originalCanvas = this.canvas;\n    // static canvas and canvas have both an array of InteractiveObjects\n    // @ts-expect-error this needs to be fixed somehow, or ignored globally\n    canvas._objects = [this];\n    this.set('canvas', canvas);\n    this.setCoords();\n    const canvasEl = canvas.toCanvasElement(multiplier || 1, options);\n    this.set('canvas', originalCanvas);\n    this.shadow = originalShadow;\n    if (originalGroup) {\n      this.group = originalGroup;\n    }\n    this.set(origParams);\n    this.setCoords();\n    // canvas.dispose will call image.dispose that will nullify the elements\n    // since this canvas is a simple element for the process, we remove references\n    // to objects in this way in order to avoid object trashing.\n    canvas._objects = [];\n    // since render has settled it is safe to destroy canvas\n    canvas.destroy();\n    return canvasEl;\n  }\n\n  /**\n   * Converts an object into a data-url-like string\n   * @param {Object} options Options object\n   * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n   * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n   */\n  toDataURL(options: toDataURLOptions = {}) {\n    return toDataURL(\n      this.toCanvasElement(options),\n      options.format || 'png',\n      options.quality || 1\n    );\n  }\n\n  /**\n   * Returns true if any of the specified types is identical to the type of an instance\n   * @param {String} type Type to check against\n   * @return {Boolean}\n   */\n  isType(...types: string[]) {\n    return (\n      types.includes((this.constructor as typeof FabricObject).type) ||\n      types.includes(this.type)\n    );\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity of this instance (is 1 unless subclassed)\n   */\n  complexity() {\n    return 1;\n  }\n\n  /**\n   * Returns a JSON representation of an instance\n   * @return {Object} JSON\n   */\n  toJSON() {\n    // delegate, not alias\n    return this.toObject();\n  }\n\n  /**\n   * Sets \"angle\" of an instance with centered rotation\n   * @param {TDegree} angle Angle value (in degrees)\n   */\n  rotate(angle: TDegree) {\n    const { centeredRotation, originX, originY } = this;\n\n    if (centeredRotation) {\n      const { x, y } = this.getRelativeCenterPoint();\n      this.originX = CENTER;\n      this.originY = CENTER;\n      this.left = x;\n      this.top = y;\n    }\n\n    this.set('angle', angle);\n\n    if (centeredRotation) {\n      const { x, y } = this.translateToOriginPoint(\n        this.getRelativeCenterPoint(),\n        originX,\n        originY\n      );\n      this.left = x;\n      this.top = y;\n      this.originX = originX;\n      this.originY = originY;\n    }\n  }\n\n  /**\n   * This callback function is called by the parent group of an object every\n   * time a non-delegated property changes on the group. It is passed the key\n   * and value as parameters. Not adding in this function's signature to avoid\n   * Travis build error about unused variables.\n   */\n  setOnGroup() {\n    // implemented by sub-classes, as needed.\n  }\n\n  /**\n   * Sets canvas globalCompositeOperation for specific object\n   * custom composition operation for the particular object can be specified using globalCompositeOperation property\n   * @param {CanvasRenderingContext2D} ctx Rendering canvas context\n   */\n  _setupCompositeOperation(ctx: CanvasRenderingContext2D) {\n    if (this.globalCompositeOperation) {\n      ctx.globalCompositeOperation = this.globalCompositeOperation;\n    }\n  }\n\n  /**\n   * cancel instance's running animations\n   * override if necessary to dispose artifacts such as `clipPath`\n   */\n  dispose() {\n    runningAnimations.cancelByTarget(this);\n    this.off();\n    this._set('canvas', undefined);\n    // clear caches\n    this._cacheCanvas && getEnv().dispose(this._cacheCanvas);\n    this._cacheCanvas = undefined;\n    this._cacheContext = null;\n  }\n\n  /**\n   *\n   * @param {Function} klass\n   * @param {object} object\n   * @param {object} [options]\n   * @param {string} [options.extraParam] property to pass as first argument to the constructor\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricObject>}\n   */\n  static _fromObject<S extends FabricObject>(\n    { type, ...object }: Record<string, unknown>,\n    { extraParam, ...options }: Abortable & { extraParam?: string } = {}\n  ): Promise<S> {\n    return enlivenObjectEnlivables<any>(cloneDeep(object), options).then(\n      (enlivedMap) => {\n        const allOptions = { ...options, ...enlivedMap };\n        // from the resulting enlived options, extract options.extraParam to arg0\n        // to avoid accidental overrides later\n        if (extraParam) {\n          const { [extraParam]: arg0, ...rest } = allOptions;\n          // @ts-expect-error different signature\n          return new this(arg0, rest);\n        } else {\n          return new this(allOptions);\n        }\n      }\n    ) as Promise<S>;\n  }\n\n  /**\n   *\n   * @param {object} object\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricObject>}\n   */\n  static fromObject<T extends TOptions<SerializedObjectProps>>(\n    object: T,\n    options?: Abortable\n  ) {\n    return this._fromObject(object, options);\n  }\n}\n\nclassRegistry.setClass(FabricObject);\nclassRegistry.setClass(FabricObject, 'object');\n"],"names":["FabricObject","AnimatableObject","getDefaults","_objectSpread","ownDefaults","type","name","this","constructor","toLowerCase","value","log","options","arguments","length","undefined","super","_defineProperty","Object","assign","setOptions","_createCacheCanvas","_cacheCanvas","createCanvasElement","_cacheContext","getContext","_updateCacheCanvas","dirty","_limitCacheSize","dims","width","height","max","config","maxCacheSideLimit","min","minCacheSideLimit","perfLimitSizeTotal","ar","limX","limY","cache","limitDimsByArea","x","capValue","y","zoomX","capped","zoomY","_getCacheCanvasDimensions","objectScale","getTotalObjectScaling","dim","_getTransformedDimensions","skewX","skewY","neededX","scaleX","neededY","scaleY","ALIASING_LIMIT","canvas","context","minCacheSize","dimensionsChanged","cacheWidth","cacheHeight","zoomChanged","drawingWidth","drawingHeight","shouldRedraw","additionalWidth","additionalHeight","shouldResizeCanvas","canvasWidth","canvasHeight","sizeGrowing","isTextObject","path","getHeightOfLine","Math","ceil","setTransform","clearRect","cacheTranslationX","round","cacheTranslationY","translate","scale","_setOptions","transform","ctx","needFullTransform","group","_transformDone","contextTop","m","calcTransformMatrix","toObject","propertiesToInclude","NUM_FRACTION_DIGITS","clipPathData","clipPath","excludeFromExport","inverted","absolutePositioned","object","pick","version","VERSION","originX","originY","left","toFixed","top","fill","isSerializableFiller","stroke","strokeWidth","strokeDashArray","concat","strokeLineCap","strokeDashOffset","strokeLineJoin","strokeUniform","strokeMiterLimit","angle","flipX","flipY","opacity","shadow","visible","backgroundColor","fillRule","paintFirst","globalCompositeOperation","includeDefaultValues","_removeDefaultValues","toDatalessObject","defaults","baseValues","keys","getPrototypeOf","pickBy","key","LEFT","TOP","baseValue","Array","isArray","toString","getObjectScaling","Point","abs","qrDecompose","zoom","getZoom","retina","getCanvasRetinaScaling","scalarMultiply","getObjectOpacity","_constrainScale","minScaleLimit","_set","isChanged","Shadow","set","groupNeedsUpdate","isOnACache","cacheProperties","includes","stateProperties","isNotVisible","render","skipOffscreen","isOnScreen","save","_setupCompositeOperation","drawSelectionBackground","_setOpacity","_setShadow","shouldCache","renderCache","drawCacheOnCanvas","_removeCacheCanvas","drawObject","restore","isCacheDirty","forClipping","hasStroke","hasFill","needsItsOwnCache","ownCaching","objectCaching","willDrawShadow","offsetX","offsetY","drawClipPathOnCache","invertTransform","drawImage","originalFill","originalStroke","_setClippingProperties","_renderBackground","_render","_drawClipPath","skipCanvas","_getNonTransformedDimensions","fillStyle","fillRect","_removeShadow","globalAlpha","_setStrokeStyles","decl","lineWidth","lineCap","lineDashOffset","lineJoin","miterLimit","isFiller","gradientUnits","gradientTransform","patternTransform","_applyPatternForTransformedGradient","strokeStyle","toLive","_applyPatternGradientTransform","_setFillStyles","_ref","_setLineDash","dashArray","push","setLineDash","retinaScaling","sx","sy","viewportTransform","iMatrix","multX","multY","scaling","nonScaling","shadowColor","color","shadowBlur","blur","browserShadowBlurConstant","shadowOffsetX","shadowOffsetY","filler","t","_renderPaintInOrder","_renderStroke","_renderFill","affectStroke","_pCtx$createPattern","pCanvas","pCtx","beginPath","moveTo","lineTo","closePath","createPattern","_findCenterFromElement","clone","objectForm","fromObject","cloneAsImage","canvasEl","toCanvasElement","classRegistry","getClass","origParams","saveObjectTransform","originalGroup","originalShadow","enableRetinaScaling","getDevicePixelRatio","multiplier","canvasProvider","el","StaticCanvas","renderOnAddRemove","withoutTransform","resetObjectTransform","withoutShadow","sendObjectToPlane","getViewportTransform","setCoords","boundingRect","getBoundingRect","shadowOffset","format","setPositionByOrigin","CENTER","originalCanvas","_objects","destroy","toDataURL","quality","isType","_len","types","_key","complexity","toJSON","rotate","centeredRotation","getRelativeCenterPoint","translateToOriginPoint","setOnGroup","dispose","runningAnimations","cancelByTarget","off","getEnv","_fromObject","_ref2","_objectWithoutProperties","_excluded","_ref3","extraParam","_excluded2","enlivenObjectEnlivables","cloneDeep","then","enlivedMap","allOptions","arg0","map","_toPropertyKey","fabricObjectDefaultValues","setClass"],"mappings":"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"}