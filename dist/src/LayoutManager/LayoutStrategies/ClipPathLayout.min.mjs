import{defineProperty as t}from"../../../_virtual/_rollupPluginBabelHelpers.min.mjs";import{Point as r}from"../../Point.min.mjs";import{makeBoundingBoxFromPoints as e}from"../../util/misc/boundingBoxFromPoints.min.mjs";import{sendPointToPlane as o}from"../../util/misc/planeChange.min.mjs";import{LayoutStrategy as i}from"./LayoutStrategy.min.mjs";import{getObjectBounds as n}from"./utils.min.mjs";import{classRegistry as s}from"../../ClassRegistry.min.mjs";class a extends i{shouldPerformLayout(t){return!!t.target.clipPath&&super.shouldPerformLayout(t)}shouldLayoutClipPath(){return!1}calcLayoutResult(t,i){const{target:s}=t,{clipPath:a}=s;if(!a||!this.shouldPerformLayout(t))return;const{width:m,height:l}=e(n(s,a)),u=new r(m,l);if(a.absolutePositioned){var c;return{center:o(a.getRelativeCenterPoint(),void 0,null===(c=s.group)||void 0===c?void 0:c.calcTransformMatrix()),size:u}}{const e=a.getRelativeCenterPoint().transform(s.calcOwnMatrix(),!0);if(this.shouldPerformLayout(t)){const{center:o=new r,correction:n=new r}=this.calcBoundingBox(i,t)||{};return{center:o.add(e),correction:n.subtract(e),size:u}}return{center:s.getRelativeCenterPoint().add(e),size:u}}}}t(a,"type","clip-path"),s.setClass(a);export{a as ClipPathLayout};
//# sourceMappingURL=ClipPathLayout.min.mjs.map
